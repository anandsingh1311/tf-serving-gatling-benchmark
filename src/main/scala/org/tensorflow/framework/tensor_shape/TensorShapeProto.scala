// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.tensorflow.framework.tensor_shape

/** Dimensions of a tensor.
  *
  * @param dim
  *   Dimensions of the tensor, such as {"input", 30}, {"output", 40}
  *   for a 30 x 40 2D tensor.  If an entry has size -1, this
  *   corresponds to a dimension of unknown size. The names are
  *   optional.
  *  
  *   The order of entries in "dim" matters: It indicates the layout of the
  *   values in the tensor in-memory representation.
  *  
  *   The first entry in "dim" is the outermost dimension used to layout the
  *   values, the last entry is the innermost dimension.  This matches the
  *   in-memory layout of RowMajor Eigen tensors.
  *  
  *   If "dim.size()" &gt; 0, "unknown_rank" must be false.
  * @param unknownRank
  *   If true, the number of dimensions in the shape is unknown.
  *  
  *   If true, "dim.size()" must be 0.
  */
@SerialVersionUID(0L)
final case class TensorShapeProto(
    dim: _root_.scala.collection.Seq[org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim] = _root_.scala.collection.Seq.empty,
    unknownRank: _root_.scala.Boolean = false
    ) extends scalapb.GeneratedMessage with scalapb.Message[TensorShapeProto] with scalapb.lenses.Updatable[TensorShapeProto] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      dim.foreach(dim => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(dim.serializedSize) + dim.serializedSize)
      if (unknownRank != false) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, unknownRank) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      dim.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = unknownRank
        if (__v != false) {
          _output__.writeBool(3, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.tensorflow.framework.tensor_shape.TensorShapeProto = {
      val __dim = (_root_.scala.collection.immutable.Vector.newBuilder[org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim] ++= this.dim)
      var __unknownRank = this.unknownRank
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __dim += _root_.scalapb.LiteParser.readMessage(_input__, org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim.defaultInstance)
          case 24 =>
            __unknownRank = _input__.readBool()
          case tag => _input__.skipField(tag)
        }
      }
      org.tensorflow.framework.tensor_shape.TensorShapeProto(
          dim = __dim.result(),
          unknownRank = __unknownRank
      )
    }
    def clearDim = copy(dim = _root_.scala.collection.Seq.empty)
    def addDim(__vs: org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim*): TensorShapeProto = addAllDim(__vs)
    def addAllDim(__vs: TraversableOnce[org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim]): TensorShapeProto = copy(dim = dim ++ __vs)
    def withDim(__v: _root_.scala.collection.Seq[org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim]): TensorShapeProto = copy(dim = __v)
    def withUnknownRank(__v: _root_.scala.Boolean): TensorShapeProto = copy(unknownRank = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => dim
        case 3 => {
          val __t = unknownRank
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => _root_.scalapb.descriptors.PRepeated(dim.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 3 => _root_.scalapb.descriptors.PBoolean(unknownRank)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.tensorflow.framework.tensor_shape.TensorShapeProto
}

object TensorShapeProto extends scalapb.GeneratedMessageCompanion[org.tensorflow.framework.tensor_shape.TensorShapeProto] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.tensorflow.framework.tensor_shape.TensorShapeProto] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.tensorflow.framework.tensor_shape.TensorShapeProto = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.tensorflow.framework.tensor_shape.TensorShapeProto(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim]],
      __fieldsMap.getOrElse(__fields.get(1), false).asInstanceOf[_root_.scala.Boolean]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.tensorflow.framework.tensor_shape.TensorShapeProto] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.tensorflow.framework.tensor_shape.TensorShapeProto(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TensorShapeProtoCompanion.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TensorShapeProtoCompanion.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
    _root_.org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim
  )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.tensorflow.framework.tensor_shape.TensorShapeProto(
  )
  /** One dimension of the tensor.
    *
    * @param size
    *   Size of the tensor in that dimension.
    *   This value must be &gt;= -1, but values of -1 are reserved for "unknown"
    *   shapes (values of -1 mean "unknown" dimension).  Certain wrappers
    *   that work with TensorShapeProto may fail at runtime when deserializing
    *   a TensorShapeProto containing a dim value of -1.
    * @param name
    *   Optional name of the tensor dimension.
    */
  @SerialVersionUID(0L)
  final case class Dim(
      size: _root_.scala.Long = 0L,
      name: _root_.scala.Predef.String = ""
      ) extends scalapb.GeneratedMessage with scalapb.Message[Dim] with scalapb.lenses.Updatable[Dim] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (size != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, size) }
        if (name != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, name) }
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = size
          if (__v != 0L) {
            _output__.writeInt64(1, __v)
          }
        };
        {
          val __v = name
          if (__v != "") {
            _output__.writeString(2, __v)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim = {
        var __size = this.size
        var __name = this.name
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __size = _input__.readInt64()
            case 18 =>
              __name = _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim(
            size = __size,
            name = __name
        )
      }
      def withSize(__v: _root_.scala.Long): Dim = copy(size = __v)
      def withName(__v: _root_.scala.Predef.String): Dim = copy(name = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = size
            if (__t != 0L) __t else null
          }
          case 2 => {
            val __t = name
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PLong(size)
          case 2 => _root_.scalapb.descriptors.PString(name)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim
  }
  
  object Dim extends scalapb.GeneratedMessageCompanion[org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim(
        __fieldsMap.getOrElse(__fields.get(0), 0L).asInstanceOf[_root_.scala.Long],
        __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.tensor_shape.TensorShapeProto.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.tensor_shape.TensorShapeProto.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim(
    )
    implicit class DimLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim](_l) {
      def size: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.size)((c_, f_) => c_.copy(size = f_))
      def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    }
    final val SIZE_FIELD_NUMBER = 1
    final val NAME_FIELD_NUMBER = 2
  }
  
  implicit class TensorShapeProtoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.tensor_shape.TensorShapeProto]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.tensorflow.framework.tensor_shape.TensorShapeProto](_l) {
    def dim: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.tensorflow.framework.tensor_shape.TensorShapeProto.Dim]] = field(_.dim)((c_, f_) => c_.copy(dim = f_))
    def unknownRank: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.unknownRank)((c_, f_) => c_.copy(unknownRank = f_))
  }
  final val DIM_FIELD_NUMBER = 2
  final val UNKNOWN_RANK_FIELD_NUMBER = 3
}
