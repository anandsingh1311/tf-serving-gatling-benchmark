// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.tensorflow.framework.resource_handle

/** Protocol buffer representing a handle to a tensorflow resource. Handles are
  * not valid across executions, but can be serialized back and forth from within
  * a single run.
  *
  * @param device
  *   Unique name for the device containing the resource.
  * @param container
  *   Container in which this resource is placed.
  * @param name
  *   Unique name of this resource.
  * @param _hashCode
  *   Hash code for the type of the resource. Is only valid in the same device
  *   and in the same execution.
  * @param maybeTypeName
  *   For debug-only, the name of the type pointed to by this handle, if
  *   available.
  */
@SerialVersionUID(0L)
final case class ResourceHandle(
    device: _root_.scala.Predef.String = "",
    container: _root_.scala.Predef.String = "",
    name: _root_.scala.Predef.String = "",
    _hashCode: _root_.scala.Long = 0L,
    maybeTypeName: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[ResourceHandle] with scalapb.lenses.Updatable[ResourceHandle] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (device != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, device) }
      if (container != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, container) }
      if (name != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, name) }
      if (_hashCode != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(4, _hashCode) }
      if (maybeTypeName != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, maybeTypeName) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = device
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = container
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = name
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = _hashCode
        if (__v != 0L) {
          _output__.writeUInt64(4, __v)
        }
      };
      {
        val __v = maybeTypeName
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.tensorflow.framework.resource_handle.ResourceHandle = {
      var __device = this.device
      var __container = this.container
      var __name = this.name
      var ___hashCode = this._hashCode
      var __maybeTypeName = this.maybeTypeName
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __device = _input__.readString()
          case 18 =>
            __container = _input__.readString()
          case 26 =>
            __name = _input__.readString()
          case 32 =>
            ___hashCode = _input__.readUInt64()
          case 42 =>
            __maybeTypeName = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      org.tensorflow.framework.resource_handle.ResourceHandle(
          device = __device,
          container = __container,
          name = __name,
          _hashCode = ___hashCode,
          maybeTypeName = __maybeTypeName
      )
    }
    def withDevice(__v: _root_.scala.Predef.String): ResourceHandle = copy(device = __v)
    def withContainer(__v: _root_.scala.Predef.String): ResourceHandle = copy(container = __v)
    def withName(__v: _root_.scala.Predef.String): ResourceHandle = copy(name = __v)
    def withHashCode(__v: _root_.scala.Long): ResourceHandle = copy(_hashCode = __v)
    def withMaybeTypeName(__v: _root_.scala.Predef.String): ResourceHandle = copy(maybeTypeName = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = device
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = container
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = _hashCode
          if (__t != 0L) __t else null
        }
        case 5 => {
          val __t = maybeTypeName
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(device)
        case 2 => _root_.scalapb.descriptors.PString(container)
        case 3 => _root_.scalapb.descriptors.PString(name)
        case 4 => _root_.scalapb.descriptors.PLong(_hashCode)
        case 5 => _root_.scalapb.descriptors.PString(maybeTypeName)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.tensorflow.framework.resource_handle.ResourceHandle
}

object ResourceHandle extends scalapb.GeneratedMessageCompanion[org.tensorflow.framework.resource_handle.ResourceHandle] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.tensorflow.framework.resource_handle.ResourceHandle] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.tensorflow.framework.resource_handle.ResourceHandle = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.tensorflow.framework.resource_handle.ResourceHandle(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.tensorflow.framework.resource_handle.ResourceHandle] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.tensorflow.framework.resource_handle.ResourceHandle(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ResourceHandleProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ResourceHandleProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.tensorflow.framework.resource_handle.ResourceHandle(
  )
  implicit class ResourceHandleLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.resource_handle.ResourceHandle]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.tensorflow.framework.resource_handle.ResourceHandle](_l) {
    def device: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.device)((c_, f_) => c_.copy(device = f_))
    def container: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.container)((c_, f_) => c_.copy(container = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def _hashCode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_._hashCode)((c_, f_) => c_.copy(_hashCode = f_))
    def maybeTypeName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.maybeTypeName)((c_, f_) => c_.copy(maybeTypeName = f_))
  }
  final val DEVICE_FIELD_NUMBER = 1
  final val CONTAINER_FIELD_NUMBER = 2
  final val NAME_FIELD_NUMBER = 3
  final val HASH_CODE_FIELD_NUMBER = 4
  final val MAYBE_TYPE_NAME_FIELD_NUMBER = 5
}
