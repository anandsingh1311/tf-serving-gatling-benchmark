// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.tensorflow.framework.meta_graph

/** NOTE: This protocol buffer is evolving, and will go through revisions in the
  * coming months.
  *
  * Protocol buffer containing the following which are necessary to restart
  * training, run inference. It can be used to serialize/de-serialize memory
  * objects necessary for running computation in a graph when crossing the
  * process boundary. It can be used for long term storage of graphs,
  * cross-language execution of graphs, etc.
  *   MetaInfoDef
  *   GraphDef
  *   SaverDef
  *   CollectionDef
  *   TensorInfo
  *   SignatureDef
  *
  * @param graphDef
  *   GraphDef.
  * @param saverDef
  *   SaverDef.
  * @param collectionDef
  *   collection_def: Map from collection name to collections.
  *   See CollectionDef section for details.
  * @param signatureDef
  *   signature_def: Map from user supplied key for a signature to a single
  *   SignatureDef.
  * @param assetFileDef
  *   Asset file def to be used with the defined graph.
  */
@SerialVersionUID(0L)
final case class MetaGraphDef(
    metaInfoDef: scala.Option[org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef] = None,
    graphDef: scala.Option[org.tensorflow.framework.graph.GraphDef] = None,
    saverDef: scala.Option[org.tensorflow.util.saver.SaverDef] = None,
    collectionDef: scala.collection.immutable.Map[_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.CollectionDef] = scala.collection.immutable.Map.empty,
    signatureDef: scala.collection.immutable.Map[_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.SignatureDef] = scala.collection.immutable.Map.empty,
    assetFileDef: _root_.scala.collection.Seq[org.tensorflow.framework.meta_graph.AssetFileDef] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[MetaGraphDef] with scalapb.lenses.Updatable[MetaGraphDef] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (metaInfoDef.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(metaInfoDef.get.serializedSize) + metaInfoDef.get.serializedSize }
      if (graphDef.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(graphDef.get.serializedSize) + graphDef.get.serializedSize }
      if (saverDef.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(saverDef.get.serializedSize) + saverDef.get.serializedSize }
      collectionDef.foreach(collectionDef => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(org.tensorflow.framework.meta_graph.MetaGraphDef._typemapper_collectionDef.toBase(collectionDef).serializedSize) + org.tensorflow.framework.meta_graph.MetaGraphDef._typemapper_collectionDef.toBase(collectionDef).serializedSize)
      signatureDef.foreach(signatureDef => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(org.tensorflow.framework.meta_graph.MetaGraphDef._typemapper_signatureDef.toBase(signatureDef).serializedSize) + org.tensorflow.framework.meta_graph.MetaGraphDef._typemapper_signatureDef.toBase(signatureDef).serializedSize)
      assetFileDef.foreach(assetFileDef => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(assetFileDef.serializedSize) + assetFileDef.serializedSize)
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      metaInfoDef.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      graphDef.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      saverDef.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      collectionDef.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(org.tensorflow.framework.meta_graph.MetaGraphDef._typemapper_collectionDef.toBase(__v).serializedSize)
        org.tensorflow.framework.meta_graph.MetaGraphDef._typemapper_collectionDef.toBase(__v).writeTo(_output__)
      };
      signatureDef.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(org.tensorflow.framework.meta_graph.MetaGraphDef._typemapper_signatureDef.toBase(__v).serializedSize)
        org.tensorflow.framework.meta_graph.MetaGraphDef._typemapper_signatureDef.toBase(__v).writeTo(_output__)
      };
      assetFileDef.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.tensorflow.framework.meta_graph.MetaGraphDef = {
      var __metaInfoDef = this.metaInfoDef
      var __graphDef = this.graphDef
      var __saverDef = this.saverDef
      val __collectionDef = (scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.CollectionDef] ++= this.collectionDef)
      val __signatureDef = (scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.SignatureDef] ++= this.signatureDef)
      val __assetFileDef = (_root_.scala.collection.immutable.Vector.newBuilder[org.tensorflow.framework.meta_graph.AssetFileDef] ++= this.assetFileDef)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __metaInfoDef = Option(_root_.scalapb.LiteParser.readMessage(_input__, __metaInfoDef.getOrElse(org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef.defaultInstance)))
          case 18 =>
            __graphDef = Option(_root_.scalapb.LiteParser.readMessage(_input__, __graphDef.getOrElse(org.tensorflow.framework.graph.GraphDef.defaultInstance)))
          case 26 =>
            __saverDef = Option(_root_.scalapb.LiteParser.readMessage(_input__, __saverDef.getOrElse(org.tensorflow.util.saver.SaverDef.defaultInstance)))
          case 34 =>
            __collectionDef += org.tensorflow.framework.meta_graph.MetaGraphDef._typemapper_collectionDef.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, org.tensorflow.framework.meta_graph.MetaGraphDef.CollectionDefEntry.defaultInstance))
          case 42 =>
            __signatureDef += org.tensorflow.framework.meta_graph.MetaGraphDef._typemapper_signatureDef.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, org.tensorflow.framework.meta_graph.MetaGraphDef.SignatureDefEntry.defaultInstance))
          case 50 =>
            __assetFileDef += _root_.scalapb.LiteParser.readMessage(_input__, org.tensorflow.framework.meta_graph.AssetFileDef.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      org.tensorflow.framework.meta_graph.MetaGraphDef(
          metaInfoDef = __metaInfoDef,
          graphDef = __graphDef,
          saverDef = __saverDef,
          collectionDef = __collectionDef.result(),
          signatureDef = __signatureDef.result(),
          assetFileDef = __assetFileDef.result()
      )
    }
    def getMetaInfoDef: org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef = metaInfoDef.getOrElse(org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef.defaultInstance)
    def clearMetaInfoDef: MetaGraphDef = copy(metaInfoDef = None)
    def withMetaInfoDef(__v: org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef): MetaGraphDef = copy(metaInfoDef = Option(__v))
    def getGraphDef: org.tensorflow.framework.graph.GraphDef = graphDef.getOrElse(org.tensorflow.framework.graph.GraphDef.defaultInstance)
    def clearGraphDef: MetaGraphDef = copy(graphDef = None)
    def withGraphDef(__v: org.tensorflow.framework.graph.GraphDef): MetaGraphDef = copy(graphDef = Option(__v))
    def getSaverDef: org.tensorflow.util.saver.SaverDef = saverDef.getOrElse(org.tensorflow.util.saver.SaverDef.defaultInstance)
    def clearSaverDef: MetaGraphDef = copy(saverDef = None)
    def withSaverDef(__v: org.tensorflow.util.saver.SaverDef): MetaGraphDef = copy(saverDef = Option(__v))
    def clearCollectionDef = copy(collectionDef = scala.collection.immutable.Map.empty)
    def addCollectionDef(__vs: (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.CollectionDef)*): MetaGraphDef = addAllCollectionDef(__vs)
    def addAllCollectionDef(__vs: TraversableOnce[(_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.CollectionDef)]): MetaGraphDef = copy(collectionDef = collectionDef ++ __vs)
    def withCollectionDef(__v: scala.collection.immutable.Map[_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.CollectionDef]): MetaGraphDef = copy(collectionDef = __v)
    def clearSignatureDef = copy(signatureDef = scala.collection.immutable.Map.empty)
    def addSignatureDef(__vs: (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.SignatureDef)*): MetaGraphDef = addAllSignatureDef(__vs)
    def addAllSignatureDef(__vs: TraversableOnce[(_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.SignatureDef)]): MetaGraphDef = copy(signatureDef = signatureDef ++ __vs)
    def withSignatureDef(__v: scala.collection.immutable.Map[_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.SignatureDef]): MetaGraphDef = copy(signatureDef = __v)
    def clearAssetFileDef = copy(assetFileDef = _root_.scala.collection.Seq.empty)
    def addAssetFileDef(__vs: org.tensorflow.framework.meta_graph.AssetFileDef*): MetaGraphDef = addAllAssetFileDef(__vs)
    def addAllAssetFileDef(__vs: TraversableOnce[org.tensorflow.framework.meta_graph.AssetFileDef]): MetaGraphDef = copy(assetFileDef = assetFileDef ++ __vs)
    def withAssetFileDef(__v: _root_.scala.collection.Seq[org.tensorflow.framework.meta_graph.AssetFileDef]): MetaGraphDef = copy(assetFileDef = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => metaInfoDef.orNull
        case 2 => graphDef.orNull
        case 3 => saverDef.orNull
        case 4 => collectionDef.map(org.tensorflow.framework.meta_graph.MetaGraphDef._typemapper_collectionDef.toBase)(_root_.scala.collection.breakOut)
        case 5 => signatureDef.map(org.tensorflow.framework.meta_graph.MetaGraphDef._typemapper_signatureDef.toBase)(_root_.scala.collection.breakOut)
        case 6 => assetFileDef
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => metaInfoDef.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => graphDef.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => saverDef.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PRepeated(collectionDef.map(org.tensorflow.framework.meta_graph.MetaGraphDef._typemapper_collectionDef.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
        case 5 => _root_.scalapb.descriptors.PRepeated(signatureDef.map(org.tensorflow.framework.meta_graph.MetaGraphDef._typemapper_signatureDef.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
        case 6 => _root_.scalapb.descriptors.PRepeated(assetFileDef.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.tensorflow.framework.meta_graph.MetaGraphDef
}

object MetaGraphDef extends scalapb.GeneratedMessageCompanion[org.tensorflow.framework.meta_graph.MetaGraphDef] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.tensorflow.framework.meta_graph.MetaGraphDef] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.tensorflow.framework.meta_graph.MetaGraphDef = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.tensorflow.framework.meta_graph.MetaGraphDef(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.tensorflow.framework.graph.GraphDef]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[org.tensorflow.util.saver.SaverDef]],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[org.tensorflow.framework.meta_graph.MetaGraphDef.CollectionDefEntry]].map(org.tensorflow.framework.meta_graph.MetaGraphDef._typemapper_collectionDef.toCustom)(_root_.scala.collection.breakOut),
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[org.tensorflow.framework.meta_graph.MetaGraphDef.SignatureDefEntry]].map(org.tensorflow.framework.meta_graph.MetaGraphDef._typemapper_signatureDef.toCustom)(_root_.scala.collection.breakOut),
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[org.tensorflow.framework.meta_graph.AssetFileDef]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.tensorflow.framework.meta_graph.MetaGraphDef] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.tensorflow.framework.meta_graph.MetaGraphDef(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.tensorflow.framework.graph.GraphDef]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[org.tensorflow.util.saver.SaverDef]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[org.tensorflow.framework.meta_graph.MetaGraphDef.CollectionDefEntry]]).getOrElse(_root_.scala.collection.Seq.empty).map(org.tensorflow.framework.meta_graph.MetaGraphDef._typemapper_collectionDef.toCustom)(_root_.scala.collection.breakOut),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[org.tensorflow.framework.meta_graph.MetaGraphDef.SignatureDefEntry]]).getOrElse(_root_.scala.collection.Seq.empty).map(org.tensorflow.framework.meta_graph.MetaGraphDef._typemapper_signatureDef.toCustom)(_root_.scala.collection.breakOut),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.collection.Seq[org.tensorflow.framework.meta_graph.AssetFileDef]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MetaGraphProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MetaGraphProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef
      case 2 => __out = org.tensorflow.framework.graph.GraphDef
      case 3 => __out = org.tensorflow.util.saver.SaverDef
      case 4 => __out = org.tensorflow.framework.meta_graph.MetaGraphDef.CollectionDefEntry
      case 5 => __out = org.tensorflow.framework.meta_graph.MetaGraphDef.SignatureDefEntry
      case 6 => __out = org.tensorflow.framework.meta_graph.AssetFileDef
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
    _root_.org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef,
    _root_.org.tensorflow.framework.meta_graph.MetaGraphDef.CollectionDefEntry,
    _root_.org.tensorflow.framework.meta_graph.MetaGraphDef.SignatureDefEntry
  )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.tensorflow.framework.meta_graph.MetaGraphDef(
  )
  /** Meta information regarding the graph to be exported.  To be used by users
    * of this protocol buffer to encode information regarding their meta graph.
    *
    * @param metaGraphVersion
    *   User specified Version string. Can be the name of the model and revision,
    *   steps this model has been trained to, etc.
    * @param strippedOpList
    *   A copy of the OpDefs used by the producer of this graph_def.
    *   Descriptions and Ops not used in graph_def are stripped out.
    * @param anyInfo
    *   A serialized protobuf. Can be the time this meta graph is created, or
    *   modified, or name of the model.
    * @param tags
    *   User supplied tag(s) on the meta_graph and included graph_def.
    *  
    *   MetaGraphDefs should be tagged with their capabilities or use-cases.
    *   Examples: "train", "serve", "gpu", "tpu", etc.
    *   These tags enable loaders to access the MetaGraph(s) appropriate for a
    *   specific use-case or runtime environment.
    * @param tensorflowVersion
    *   The __version__ string of the tensorflow build used to write this graph.
    *   This will be populated by the framework, which will overwrite any user
    *   supplied value.
    * @param tensorflowGitVersion
    *   The __git_version__ string of the tensorflow build used to write this
    *   graph. This will be populated by the framework, which will overwrite any
    *   user supplied value.
    */
  @SerialVersionUID(0L)
  final case class MetaInfoDef(
      metaGraphVersion: _root_.scala.Predef.String = "",
      strippedOpList: scala.Option[org.tensorflow.framework.op_def.OpList] = None,
      anyInfo: scala.Option[com.google.protobuf.any.Any] = None,
      tags: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
      tensorflowVersion: _root_.scala.Predef.String = "",
      tensorflowGitVersion: _root_.scala.Predef.String = ""
      ) extends scalapb.GeneratedMessage with scalapb.Message[MetaInfoDef] with scalapb.lenses.Updatable[MetaInfoDef] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (metaGraphVersion != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, metaGraphVersion) }
        if (strippedOpList.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(strippedOpList.get.serializedSize) + strippedOpList.get.serializedSize }
        if (anyInfo.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(anyInfo.get.serializedSize) + anyInfo.get.serializedSize }
        tags.foreach(tags => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, tags))
        if (tensorflowVersion != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, tensorflowVersion) }
        if (tensorflowGitVersion != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, tensorflowGitVersion) }
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = metaGraphVersion
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
        strippedOpList.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        anyInfo.foreach { __v =>
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        tags.foreach { __v =>
          _output__.writeString(4, __v)
        };
        {
          val __v = tensorflowVersion
          if (__v != "") {
            _output__.writeString(5, __v)
          }
        };
        {
          val __v = tensorflowGitVersion
          if (__v != "") {
            _output__.writeString(6, __v)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef = {
        var __metaGraphVersion = this.metaGraphVersion
        var __strippedOpList = this.strippedOpList
        var __anyInfo = this.anyInfo
        val __tags = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.tags)
        var __tensorflowVersion = this.tensorflowVersion
        var __tensorflowGitVersion = this.tensorflowGitVersion
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __metaGraphVersion = _input__.readString()
            case 18 =>
              __strippedOpList = Option(_root_.scalapb.LiteParser.readMessage(_input__, __strippedOpList.getOrElse(org.tensorflow.framework.op_def.OpList.defaultInstance)))
            case 26 =>
              __anyInfo = Option(_root_.scalapb.LiteParser.readMessage(_input__, __anyInfo.getOrElse(com.google.protobuf.any.Any.defaultInstance)))
            case 34 =>
              __tags += _input__.readString()
            case 42 =>
              __tensorflowVersion = _input__.readString()
            case 50 =>
              __tensorflowGitVersion = _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef(
            metaGraphVersion = __metaGraphVersion,
            strippedOpList = __strippedOpList,
            anyInfo = __anyInfo,
            tags = __tags.result(),
            tensorflowVersion = __tensorflowVersion,
            tensorflowGitVersion = __tensorflowGitVersion
        )
      }
      def withMetaGraphVersion(__v: _root_.scala.Predef.String): MetaInfoDef = copy(metaGraphVersion = __v)
      def getStrippedOpList: org.tensorflow.framework.op_def.OpList = strippedOpList.getOrElse(org.tensorflow.framework.op_def.OpList.defaultInstance)
      def clearStrippedOpList: MetaInfoDef = copy(strippedOpList = None)
      def withStrippedOpList(__v: org.tensorflow.framework.op_def.OpList): MetaInfoDef = copy(strippedOpList = Option(__v))
      def getAnyInfo: com.google.protobuf.any.Any = anyInfo.getOrElse(com.google.protobuf.any.Any.defaultInstance)
      def clearAnyInfo: MetaInfoDef = copy(anyInfo = None)
      def withAnyInfo(__v: com.google.protobuf.any.Any): MetaInfoDef = copy(anyInfo = Option(__v))
      def clearTags = copy(tags = _root_.scala.collection.Seq.empty)
      def addTags(__vs: _root_.scala.Predef.String*): MetaInfoDef = addAllTags(__vs)
      def addAllTags(__vs: TraversableOnce[_root_.scala.Predef.String]): MetaInfoDef = copy(tags = tags ++ __vs)
      def withTags(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): MetaInfoDef = copy(tags = __v)
      def withTensorflowVersion(__v: _root_.scala.Predef.String): MetaInfoDef = copy(tensorflowVersion = __v)
      def withTensorflowGitVersion(__v: _root_.scala.Predef.String): MetaInfoDef = copy(tensorflowGitVersion = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = metaGraphVersion
            if (__t != "") __t else null
          }
          case 2 => strippedOpList.orNull
          case 3 => anyInfo.orNull
          case 4 => tags
          case 5 => {
            val __t = tensorflowVersion
            if (__t != "") __t else null
          }
          case 6 => {
            val __t = tensorflowGitVersion
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(metaGraphVersion)
          case 2 => strippedOpList.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => anyInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => _root_.scalapb.descriptors.PRepeated(tags.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
          case 5 => _root_.scalapb.descriptors.PString(tensorflowVersion)
          case 6 => _root_.scalapb.descriptors.PString(tensorflowGitVersion)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef
  }
  
  object MetaInfoDef extends scalapb.GeneratedMessageCompanion[org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.tensorflow.framework.op_def.OpList]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[com.google.protobuf.any.Any]],
        __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
        __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.getOrElse(__fields.get(5), "").asInstanceOf[_root_.scala.Predef.String]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.tensorflow.framework.op_def.OpList]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[com.google.protobuf.any.Any]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.meta_graph.MetaGraphDef.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.meta_graph.MetaGraphDef.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = org.tensorflow.framework.op_def.OpList
        case 3 => __out = com.google.protobuf.any.Any
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef(
    )
    implicit class MetaInfoDefLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef](_l) {
      def metaGraphVersion: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.metaGraphVersion)((c_, f_) => c_.copy(metaGraphVersion = f_))
      def strippedOpList: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.op_def.OpList] = field(_.getStrippedOpList)((c_, f_) => c_.copy(strippedOpList = Option(f_)))
      def optionalStrippedOpList: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[org.tensorflow.framework.op_def.OpList]] = field(_.strippedOpList)((c_, f_) => c_.copy(strippedOpList = f_))
      def anyInfo: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.any.Any] = field(_.getAnyInfo)((c_, f_) => c_.copy(anyInfo = Option(f_)))
      def optionalAnyInfo: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[com.google.protobuf.any.Any]] = field(_.anyInfo)((c_, f_) => c_.copy(anyInfo = f_))
      def tags: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.tags)((c_, f_) => c_.copy(tags = f_))
      def tensorflowVersion: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.tensorflowVersion)((c_, f_) => c_.copy(tensorflowVersion = f_))
      def tensorflowGitVersion: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.tensorflowGitVersion)((c_, f_) => c_.copy(tensorflowGitVersion = f_))
    }
    final val META_GRAPH_VERSION_FIELD_NUMBER = 1
    final val STRIPPED_OP_LIST_FIELD_NUMBER = 2
    final val ANY_INFO_FIELD_NUMBER = 3
    final val TAGS_FIELD_NUMBER = 4
    final val TENSORFLOW_VERSION_FIELD_NUMBER = 5
    final val TENSORFLOW_GIT_VERSION_FIELD_NUMBER = 6
  }
  
  @SerialVersionUID(0L)
  final case class CollectionDefEntry(
      key: _root_.scala.Predef.String = "",
      value: scala.Option[org.tensorflow.framework.meta_graph.CollectionDef] = None
      ) extends scalapb.GeneratedMessage with scalapb.Message[CollectionDefEntry] with scalapb.lenses.Updatable[CollectionDefEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (key != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, key) }
        if (value.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.get.serializedSize) + value.get.serializedSize }
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.tensorflow.framework.meta_graph.MetaGraphDef.CollectionDefEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = _input__.readString()
            case 18 =>
              __value = Option(_root_.scalapb.LiteParser.readMessage(_input__, __value.getOrElse(org.tensorflow.framework.meta_graph.CollectionDef.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        org.tensorflow.framework.meta_graph.MetaGraphDef.CollectionDefEntry(
            key = __key,
            value = __value
        )
      }
      def withKey(__v: _root_.scala.Predef.String): CollectionDefEntry = copy(key = __v)
      def getValue: org.tensorflow.framework.meta_graph.CollectionDef = value.getOrElse(org.tensorflow.framework.meta_graph.CollectionDef.defaultInstance)
      def clearValue: CollectionDefEntry = copy(value = None)
      def withValue(__v: org.tensorflow.framework.meta_graph.CollectionDef): CollectionDefEntry = copy(value = Option(__v))
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.tensorflow.framework.meta_graph.MetaGraphDef.CollectionDefEntry
  }
  
  object CollectionDefEntry extends scalapb.GeneratedMessageCompanion[org.tensorflow.framework.meta_graph.MetaGraphDef.CollectionDefEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.tensorflow.framework.meta_graph.MetaGraphDef.CollectionDefEntry] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.tensorflow.framework.meta_graph.MetaGraphDef.CollectionDefEntry = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.tensorflow.framework.meta_graph.MetaGraphDef.CollectionDefEntry(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.tensorflow.framework.meta_graph.CollectionDef]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.tensorflow.framework.meta_graph.MetaGraphDef.CollectionDefEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.tensorflow.framework.meta_graph.MetaGraphDef.CollectionDefEntry(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.tensorflow.framework.meta_graph.CollectionDef]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.meta_graph.MetaGraphDef.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.meta_graph.MetaGraphDef.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = org.tensorflow.framework.meta_graph.CollectionDef
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.tensorflow.framework.meta_graph.MetaGraphDef.CollectionDefEntry(
    )
    implicit class CollectionDefEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.meta_graph.MetaGraphDef.CollectionDefEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.tensorflow.framework.meta_graph.MetaGraphDef.CollectionDefEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.meta_graph.CollectionDef] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[org.tensorflow.framework.meta_graph.CollectionDef]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[org.tensorflow.framework.meta_graph.MetaGraphDef.CollectionDefEntry, (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.CollectionDef)] =
      _root_.scalapb.TypeMapper[org.tensorflow.framework.meta_graph.MetaGraphDef.CollectionDefEntry, (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.CollectionDef)](__m => (__m.key, __m.getValue))(__p => org.tensorflow.framework.meta_graph.MetaGraphDef.CollectionDefEntry(__p._1, Some(__p._2)))
  }
  
  @SerialVersionUID(0L)
  final case class SignatureDefEntry(
      key: _root_.scala.Predef.String = "",
      value: scala.Option[org.tensorflow.framework.meta_graph.SignatureDef] = None
      ) extends scalapb.GeneratedMessage with scalapb.Message[SignatureDefEntry] with scalapb.lenses.Updatable[SignatureDefEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (key != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, key) }
        if (value.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.get.serializedSize) + value.get.serializedSize }
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.tensorflow.framework.meta_graph.MetaGraphDef.SignatureDefEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = _input__.readString()
            case 18 =>
              __value = Option(_root_.scalapb.LiteParser.readMessage(_input__, __value.getOrElse(org.tensorflow.framework.meta_graph.SignatureDef.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        org.tensorflow.framework.meta_graph.MetaGraphDef.SignatureDefEntry(
            key = __key,
            value = __value
        )
      }
      def withKey(__v: _root_.scala.Predef.String): SignatureDefEntry = copy(key = __v)
      def getValue: org.tensorflow.framework.meta_graph.SignatureDef = value.getOrElse(org.tensorflow.framework.meta_graph.SignatureDef.defaultInstance)
      def clearValue: SignatureDefEntry = copy(value = None)
      def withValue(__v: org.tensorflow.framework.meta_graph.SignatureDef): SignatureDefEntry = copy(value = Option(__v))
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.tensorflow.framework.meta_graph.MetaGraphDef.SignatureDefEntry
  }
  
  object SignatureDefEntry extends scalapb.GeneratedMessageCompanion[org.tensorflow.framework.meta_graph.MetaGraphDef.SignatureDefEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.tensorflow.framework.meta_graph.MetaGraphDef.SignatureDefEntry] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.tensorflow.framework.meta_graph.MetaGraphDef.SignatureDefEntry = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.tensorflow.framework.meta_graph.MetaGraphDef.SignatureDefEntry(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.tensorflow.framework.meta_graph.SignatureDef]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.tensorflow.framework.meta_graph.MetaGraphDef.SignatureDefEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.tensorflow.framework.meta_graph.MetaGraphDef.SignatureDefEntry(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.tensorflow.framework.meta_graph.SignatureDef]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.meta_graph.MetaGraphDef.javaDescriptor.getNestedTypes.get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.meta_graph.MetaGraphDef.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = org.tensorflow.framework.meta_graph.SignatureDef
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.tensorflow.framework.meta_graph.MetaGraphDef.SignatureDefEntry(
    )
    implicit class SignatureDefEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.meta_graph.MetaGraphDef.SignatureDefEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.tensorflow.framework.meta_graph.MetaGraphDef.SignatureDefEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.meta_graph.SignatureDef] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[org.tensorflow.framework.meta_graph.SignatureDef]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[org.tensorflow.framework.meta_graph.MetaGraphDef.SignatureDefEntry, (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.SignatureDef)] =
      _root_.scalapb.TypeMapper[org.tensorflow.framework.meta_graph.MetaGraphDef.SignatureDefEntry, (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.SignatureDef)](__m => (__m.key, __m.getValue))(__p => org.tensorflow.framework.meta_graph.MetaGraphDef.SignatureDefEntry(__p._1, Some(__p._2)))
  }
  
  implicit class MetaGraphDefLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.meta_graph.MetaGraphDef]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.tensorflow.framework.meta_graph.MetaGraphDef](_l) {
    def metaInfoDef: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef] = field(_.getMetaInfoDef)((c_, f_) => c_.copy(metaInfoDef = Option(f_)))
    def optionalMetaInfoDef: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[org.tensorflow.framework.meta_graph.MetaGraphDef.MetaInfoDef]] = field(_.metaInfoDef)((c_, f_) => c_.copy(metaInfoDef = f_))
    def graphDef: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.graph.GraphDef] = field(_.getGraphDef)((c_, f_) => c_.copy(graphDef = Option(f_)))
    def optionalGraphDef: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[org.tensorflow.framework.graph.GraphDef]] = field(_.graphDef)((c_, f_) => c_.copy(graphDef = f_))
    def saverDef: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.util.saver.SaverDef] = field(_.getSaverDef)((c_, f_) => c_.copy(saverDef = Option(f_)))
    def optionalSaverDef: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[org.tensorflow.util.saver.SaverDef]] = field(_.saverDef)((c_, f_) => c_.copy(saverDef = f_))
    def collectionDef: _root_.scalapb.lenses.Lens[UpperPB, scala.collection.immutable.Map[_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.CollectionDef]] = field(_.collectionDef)((c_, f_) => c_.copy(collectionDef = f_))
    def signatureDef: _root_.scalapb.lenses.Lens[UpperPB, scala.collection.immutable.Map[_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.SignatureDef]] = field(_.signatureDef)((c_, f_) => c_.copy(signatureDef = f_))
    def assetFileDef: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.tensorflow.framework.meta_graph.AssetFileDef]] = field(_.assetFileDef)((c_, f_) => c_.copy(assetFileDef = f_))
  }
  final val META_INFO_DEF_FIELD_NUMBER = 1
  final val GRAPH_DEF_FIELD_NUMBER = 2
  final val SAVER_DEF_FIELD_NUMBER = 3
  final val COLLECTION_DEF_FIELD_NUMBER = 4
  final val SIGNATURE_DEF_FIELD_NUMBER = 5
  final val ASSET_FILE_DEF_FIELD_NUMBER = 6
  @transient
  private val _typemapper_collectionDef: _root_.scalapb.TypeMapper[org.tensorflow.framework.meta_graph.MetaGraphDef.CollectionDefEntry, (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.CollectionDef)] = implicitly[_root_.scalapb.TypeMapper[org.tensorflow.framework.meta_graph.MetaGraphDef.CollectionDefEntry, (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.CollectionDef)]]
  @transient
  private val _typemapper_signatureDef: _root_.scalapb.TypeMapper[org.tensorflow.framework.meta_graph.MetaGraphDef.SignatureDefEntry, (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.SignatureDef)] = implicitly[_root_.scalapb.TypeMapper[org.tensorflow.framework.meta_graph.MetaGraphDef.SignatureDefEntry, (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.SignatureDef)]]
}
