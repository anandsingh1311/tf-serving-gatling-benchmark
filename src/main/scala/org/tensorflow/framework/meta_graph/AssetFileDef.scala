// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.tensorflow.framework.meta_graph

/** An asset file def for a single file or a set of sharded files with the same
  * name.
  *
  * @param tensorInfo
  *   The tensor to bind the asset filename to.
  * @param filename
  *   The filename within an assets directory. Note: does not include the path
  *   prefix, i.e. directories. For an asset at /tmp/path/vocab.txt, the filename
  *   would be "vocab.txt".
  */
@SerialVersionUID(0L)
final case class AssetFileDef(
    tensorInfo: scala.Option[org.tensorflow.framework.meta_graph.TensorInfo] = None,
    filename: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[AssetFileDef] with scalapb.lenses.Updatable[AssetFileDef] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (tensorInfo.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(tensorInfo.get.serializedSize) + tensorInfo.get.serializedSize }
      if (filename != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, filename) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      tensorInfo.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = filename
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.tensorflow.framework.meta_graph.AssetFileDef = {
      var __tensorInfo = this.tensorInfo
      var __filename = this.filename
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __tensorInfo = Option(_root_.scalapb.LiteParser.readMessage(_input__, __tensorInfo.getOrElse(org.tensorflow.framework.meta_graph.TensorInfo.defaultInstance)))
          case 18 =>
            __filename = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      org.tensorflow.framework.meta_graph.AssetFileDef(
          tensorInfo = __tensorInfo,
          filename = __filename
      )
    }
    def getTensorInfo: org.tensorflow.framework.meta_graph.TensorInfo = tensorInfo.getOrElse(org.tensorflow.framework.meta_graph.TensorInfo.defaultInstance)
    def clearTensorInfo: AssetFileDef = copy(tensorInfo = None)
    def withTensorInfo(__v: org.tensorflow.framework.meta_graph.TensorInfo): AssetFileDef = copy(tensorInfo = Option(__v))
    def withFilename(__v: _root_.scala.Predef.String): AssetFileDef = copy(filename = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => tensorInfo.orNull
        case 2 => {
          val __t = filename
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => tensorInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PString(filename)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.tensorflow.framework.meta_graph.AssetFileDef
}

object AssetFileDef extends scalapb.GeneratedMessageCompanion[org.tensorflow.framework.meta_graph.AssetFileDef] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.tensorflow.framework.meta_graph.AssetFileDef] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.tensorflow.framework.meta_graph.AssetFileDef = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.tensorflow.framework.meta_graph.AssetFileDef(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[org.tensorflow.framework.meta_graph.TensorInfo]],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.tensorflow.framework.meta_graph.AssetFileDef] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.tensorflow.framework.meta_graph.AssetFileDef(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[org.tensorflow.framework.meta_graph.TensorInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MetaGraphProto.javaDescriptor.getMessageTypes.get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MetaGraphProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = org.tensorflow.framework.meta_graph.TensorInfo
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.tensorflow.framework.meta_graph.AssetFileDef(
  )
  implicit class AssetFileDefLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.meta_graph.AssetFileDef]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.tensorflow.framework.meta_graph.AssetFileDef](_l) {
    def tensorInfo: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.meta_graph.TensorInfo] = field(_.getTensorInfo)((c_, f_) => c_.copy(tensorInfo = Option(f_)))
    def optionalTensorInfo: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[org.tensorflow.framework.meta_graph.TensorInfo]] = field(_.tensorInfo)((c_, f_) => c_.copy(tensorInfo = f_))
    def filename: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.filename)((c_, f_) => c_.copy(filename = f_))
  }
  final val TENSOR_INFO_FIELD_NUMBER = 1
  final val FILENAME_FIELD_NUMBER = 2
}
