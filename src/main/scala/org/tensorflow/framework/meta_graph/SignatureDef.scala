// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.tensorflow.framework.meta_graph

/** SignatureDef defines the signature of a computation supported by a TensorFlow
  * graph.
  *
  * For example, a model with two loss computations, sharing a single input,
  * might have the following signature_def map.
  *
  * Note that across the two SignatureDefs "loss_A" and "loss_B", the input key,
  * output key, and method_name are identical, and will be used by system(s) that
  * implement or rely upon this particular loss method. The output tensor names
  * differ, demonstrating how different outputs can exist for the same method.
  *
  * signature_def {
  *   key: "loss_A"
  *   value {
  *     inputs {
  *       key: "input"
  *       value {
  *         name: "input:0"
  *         dtype: DT_STRING
  *         tensor_shape: ...
  *       }
  *     }
  *     outputs {
  *       key: "loss_output"
  *       value {
  *         name: "loss_output_A:0"
  *         dtype: DT_FLOAT
  *         tensor_shape: ...
  *       }
  *     }
  *   }
  *   ...
  *   method_name: "some/package/compute_loss"
  * }
  * signature_def {
  *   key: "loss_B"
  *   value {
  *     inputs {
  *       key: "input"
  *       value {
  *         name: "input:0"
  *         dtype: DT_STRING
  *         tensor_shape: ...
  *       }
  *     }
  *     outputs {
  *       key: "loss_output"
  *       value {
  *         name: "loss_output_B:0"
  *         dtype: DT_FLOAT
  *         tensor_shape: ...
  *       }
  *     }
  *   }
  *   ...
  *   method_name: "some/package/compute_loss"
  * }
  *
  * @param inputs
  *   Named input parameters.
  * @param outputs
  *   Named output parameters.
  * @param methodName
  *   Extensible method_name information enabling third-party users to mark a
  *   SignatureDef as supporting a particular method. This enables producers and
  *   consumers of SignatureDefs, e.g. a model definition library and a serving
  *   library to have a clear hand-off regarding the semantics of a computation.
  *  
  *   Note that multiple SignatureDefs in a single MetaGraphDef may have the same
  *   method_name. This is commonly used to support multi-headed computation,
  *   where a single graph computation may return multiple results.
  */
@SerialVersionUID(0L)
final case class SignatureDef(
    inputs: scala.collection.immutable.Map[_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.TensorInfo] = scala.collection.immutable.Map.empty,
    outputs: scala.collection.immutable.Map[_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.TensorInfo] = scala.collection.immutable.Map.empty,
    methodName: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[SignatureDef] with scalapb.lenses.Updatable[SignatureDef] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      inputs.foreach(inputs => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(org.tensorflow.framework.meta_graph.SignatureDef._typemapper_inputs.toBase(inputs).serializedSize) + org.tensorflow.framework.meta_graph.SignatureDef._typemapper_inputs.toBase(inputs).serializedSize)
      outputs.foreach(outputs => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(org.tensorflow.framework.meta_graph.SignatureDef._typemapper_outputs.toBase(outputs).serializedSize) + org.tensorflow.framework.meta_graph.SignatureDef._typemapper_outputs.toBase(outputs).serializedSize)
      if (methodName != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, methodName) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      inputs.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(org.tensorflow.framework.meta_graph.SignatureDef._typemapper_inputs.toBase(__v).serializedSize)
        org.tensorflow.framework.meta_graph.SignatureDef._typemapper_inputs.toBase(__v).writeTo(_output__)
      };
      outputs.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(org.tensorflow.framework.meta_graph.SignatureDef._typemapper_outputs.toBase(__v).serializedSize)
        org.tensorflow.framework.meta_graph.SignatureDef._typemapper_outputs.toBase(__v).writeTo(_output__)
      };
      {
        val __v = methodName
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.tensorflow.framework.meta_graph.SignatureDef = {
      val __inputs = (scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.TensorInfo] ++= this.inputs)
      val __outputs = (scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.TensorInfo] ++= this.outputs)
      var __methodName = this.methodName
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __inputs += org.tensorflow.framework.meta_graph.SignatureDef._typemapper_inputs.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, org.tensorflow.framework.meta_graph.SignatureDef.InputsEntry.defaultInstance))
          case 18 =>
            __outputs += org.tensorflow.framework.meta_graph.SignatureDef._typemapper_outputs.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, org.tensorflow.framework.meta_graph.SignatureDef.OutputsEntry.defaultInstance))
          case 26 =>
            __methodName = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      org.tensorflow.framework.meta_graph.SignatureDef(
          inputs = __inputs.result(),
          outputs = __outputs.result(),
          methodName = __methodName
      )
    }
    def clearInputs = copy(inputs = scala.collection.immutable.Map.empty)
    def addInputs(__vs: (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.TensorInfo)*): SignatureDef = addAllInputs(__vs)
    def addAllInputs(__vs: TraversableOnce[(_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.TensorInfo)]): SignatureDef = copy(inputs = inputs ++ __vs)
    def withInputs(__v: scala.collection.immutable.Map[_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.TensorInfo]): SignatureDef = copy(inputs = __v)
    def clearOutputs = copy(outputs = scala.collection.immutable.Map.empty)
    def addOutputs(__vs: (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.TensorInfo)*): SignatureDef = addAllOutputs(__vs)
    def addAllOutputs(__vs: TraversableOnce[(_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.TensorInfo)]): SignatureDef = copy(outputs = outputs ++ __vs)
    def withOutputs(__v: scala.collection.immutable.Map[_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.TensorInfo]): SignatureDef = copy(outputs = __v)
    def withMethodName(__v: _root_.scala.Predef.String): SignatureDef = copy(methodName = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => inputs.map(org.tensorflow.framework.meta_graph.SignatureDef._typemapper_inputs.toBase)(_root_.scala.collection.breakOut)
        case 2 => outputs.map(org.tensorflow.framework.meta_graph.SignatureDef._typemapper_outputs.toBase)(_root_.scala.collection.breakOut)
        case 3 => {
          val __t = methodName
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(inputs.map(org.tensorflow.framework.meta_graph.SignatureDef._typemapper_inputs.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
        case 2 => _root_.scalapb.descriptors.PRepeated(outputs.map(org.tensorflow.framework.meta_graph.SignatureDef._typemapper_outputs.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
        case 3 => _root_.scalapb.descriptors.PString(methodName)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.tensorflow.framework.meta_graph.SignatureDef
}

object SignatureDef extends scalapb.GeneratedMessageCompanion[org.tensorflow.framework.meta_graph.SignatureDef] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.tensorflow.framework.meta_graph.SignatureDef] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.tensorflow.framework.meta_graph.SignatureDef = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.tensorflow.framework.meta_graph.SignatureDef(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.tensorflow.framework.meta_graph.SignatureDef.InputsEntry]].map(org.tensorflow.framework.meta_graph.SignatureDef._typemapper_inputs.toCustom)(_root_.scala.collection.breakOut),
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[org.tensorflow.framework.meta_graph.SignatureDef.OutputsEntry]].map(org.tensorflow.framework.meta_graph.SignatureDef._typemapper_outputs.toCustom)(_root_.scala.collection.breakOut),
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.tensorflow.framework.meta_graph.SignatureDef] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.tensorflow.framework.meta_graph.SignatureDef(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.tensorflow.framework.meta_graph.SignatureDef.InputsEntry]]).getOrElse(_root_.scala.collection.Seq.empty).map(org.tensorflow.framework.meta_graph.SignatureDef._typemapper_inputs.toCustom)(_root_.scala.collection.breakOut),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[org.tensorflow.framework.meta_graph.SignatureDef.OutputsEntry]]).getOrElse(_root_.scala.collection.Seq.empty).map(org.tensorflow.framework.meta_graph.SignatureDef._typemapper_outputs.toCustom)(_root_.scala.collection.breakOut),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MetaGraphProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MetaGraphProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = org.tensorflow.framework.meta_graph.SignatureDef.InputsEntry
      case 2 => __out = org.tensorflow.framework.meta_graph.SignatureDef.OutputsEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
    _root_.org.tensorflow.framework.meta_graph.SignatureDef.InputsEntry,
    _root_.org.tensorflow.framework.meta_graph.SignatureDef.OutputsEntry
  )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.tensorflow.framework.meta_graph.SignatureDef(
  )
  @SerialVersionUID(0L)
  final case class InputsEntry(
      key: _root_.scala.Predef.String = "",
      value: scala.Option[org.tensorflow.framework.meta_graph.TensorInfo] = None
      ) extends scalapb.GeneratedMessage with scalapb.Message[InputsEntry] with scalapb.lenses.Updatable[InputsEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (key != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, key) }
        if (value.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.get.serializedSize) + value.get.serializedSize }
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.tensorflow.framework.meta_graph.SignatureDef.InputsEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = _input__.readString()
            case 18 =>
              __value = Option(_root_.scalapb.LiteParser.readMessage(_input__, __value.getOrElse(org.tensorflow.framework.meta_graph.TensorInfo.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        org.tensorflow.framework.meta_graph.SignatureDef.InputsEntry(
            key = __key,
            value = __value
        )
      }
      def withKey(__v: _root_.scala.Predef.String): InputsEntry = copy(key = __v)
      def getValue: org.tensorflow.framework.meta_graph.TensorInfo = value.getOrElse(org.tensorflow.framework.meta_graph.TensorInfo.defaultInstance)
      def clearValue: InputsEntry = copy(value = None)
      def withValue(__v: org.tensorflow.framework.meta_graph.TensorInfo): InputsEntry = copy(value = Option(__v))
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.tensorflow.framework.meta_graph.SignatureDef.InputsEntry
  }
  
  object InputsEntry extends scalapb.GeneratedMessageCompanion[org.tensorflow.framework.meta_graph.SignatureDef.InputsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.tensorflow.framework.meta_graph.SignatureDef.InputsEntry] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.tensorflow.framework.meta_graph.SignatureDef.InputsEntry = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.tensorflow.framework.meta_graph.SignatureDef.InputsEntry(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.tensorflow.framework.meta_graph.TensorInfo]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.tensorflow.framework.meta_graph.SignatureDef.InputsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.tensorflow.framework.meta_graph.SignatureDef.InputsEntry(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.tensorflow.framework.meta_graph.TensorInfo]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.meta_graph.SignatureDef.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.meta_graph.SignatureDef.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = org.tensorflow.framework.meta_graph.TensorInfo
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.tensorflow.framework.meta_graph.SignatureDef.InputsEntry(
    )
    implicit class InputsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.meta_graph.SignatureDef.InputsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.tensorflow.framework.meta_graph.SignatureDef.InputsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.meta_graph.TensorInfo] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[org.tensorflow.framework.meta_graph.TensorInfo]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[org.tensorflow.framework.meta_graph.SignatureDef.InputsEntry, (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.TensorInfo)] =
      _root_.scalapb.TypeMapper[org.tensorflow.framework.meta_graph.SignatureDef.InputsEntry, (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.TensorInfo)](__m => (__m.key, __m.getValue))(__p => org.tensorflow.framework.meta_graph.SignatureDef.InputsEntry(__p._1, Some(__p._2)))
  }
  
  @SerialVersionUID(0L)
  final case class OutputsEntry(
      key: _root_.scala.Predef.String = "",
      value: scala.Option[org.tensorflow.framework.meta_graph.TensorInfo] = None
      ) extends scalapb.GeneratedMessage with scalapb.Message[OutputsEntry] with scalapb.lenses.Updatable[OutputsEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (key != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, key) }
        if (value.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.get.serializedSize) + value.get.serializedSize }
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.tensorflow.framework.meta_graph.SignatureDef.OutputsEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = _input__.readString()
            case 18 =>
              __value = Option(_root_.scalapb.LiteParser.readMessage(_input__, __value.getOrElse(org.tensorflow.framework.meta_graph.TensorInfo.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        org.tensorflow.framework.meta_graph.SignatureDef.OutputsEntry(
            key = __key,
            value = __value
        )
      }
      def withKey(__v: _root_.scala.Predef.String): OutputsEntry = copy(key = __v)
      def getValue: org.tensorflow.framework.meta_graph.TensorInfo = value.getOrElse(org.tensorflow.framework.meta_graph.TensorInfo.defaultInstance)
      def clearValue: OutputsEntry = copy(value = None)
      def withValue(__v: org.tensorflow.framework.meta_graph.TensorInfo): OutputsEntry = copy(value = Option(__v))
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.tensorflow.framework.meta_graph.SignatureDef.OutputsEntry
  }
  
  object OutputsEntry extends scalapb.GeneratedMessageCompanion[org.tensorflow.framework.meta_graph.SignatureDef.OutputsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.tensorflow.framework.meta_graph.SignatureDef.OutputsEntry] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.tensorflow.framework.meta_graph.SignatureDef.OutputsEntry = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.tensorflow.framework.meta_graph.SignatureDef.OutputsEntry(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.tensorflow.framework.meta_graph.TensorInfo]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.tensorflow.framework.meta_graph.SignatureDef.OutputsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.tensorflow.framework.meta_graph.SignatureDef.OutputsEntry(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.tensorflow.framework.meta_graph.TensorInfo]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.meta_graph.SignatureDef.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.meta_graph.SignatureDef.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = org.tensorflow.framework.meta_graph.TensorInfo
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.tensorflow.framework.meta_graph.SignatureDef.OutputsEntry(
    )
    implicit class OutputsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.meta_graph.SignatureDef.OutputsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.tensorflow.framework.meta_graph.SignatureDef.OutputsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.meta_graph.TensorInfo] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[org.tensorflow.framework.meta_graph.TensorInfo]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[org.tensorflow.framework.meta_graph.SignatureDef.OutputsEntry, (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.TensorInfo)] =
      _root_.scalapb.TypeMapper[org.tensorflow.framework.meta_graph.SignatureDef.OutputsEntry, (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.TensorInfo)](__m => (__m.key, __m.getValue))(__p => org.tensorflow.framework.meta_graph.SignatureDef.OutputsEntry(__p._1, Some(__p._2)))
  }
  
  implicit class SignatureDefLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.meta_graph.SignatureDef]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.tensorflow.framework.meta_graph.SignatureDef](_l) {
    def inputs: _root_.scalapb.lenses.Lens[UpperPB, scala.collection.immutable.Map[_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.TensorInfo]] = field(_.inputs)((c_, f_) => c_.copy(inputs = f_))
    def outputs: _root_.scalapb.lenses.Lens[UpperPB, scala.collection.immutable.Map[_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.TensorInfo]] = field(_.outputs)((c_, f_) => c_.copy(outputs = f_))
    def methodName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.methodName)((c_, f_) => c_.copy(methodName = f_))
  }
  final val INPUTS_FIELD_NUMBER = 1
  final val OUTPUTS_FIELD_NUMBER = 2
  final val METHOD_NAME_FIELD_NUMBER = 3
  @transient
  private val _typemapper_inputs: _root_.scalapb.TypeMapper[org.tensorflow.framework.meta_graph.SignatureDef.InputsEntry, (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.TensorInfo)] = implicitly[_root_.scalapb.TypeMapper[org.tensorflow.framework.meta_graph.SignatureDef.InputsEntry, (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.TensorInfo)]]
  @transient
  private val _typemapper_outputs: _root_.scalapb.TypeMapper[org.tensorflow.framework.meta_graph.SignatureDef.OutputsEntry, (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.TensorInfo)] = implicitly[_root_.scalapb.TypeMapper[org.tensorflow.framework.meta_graph.SignatureDef.OutputsEntry, (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.TensorInfo)]]
}
