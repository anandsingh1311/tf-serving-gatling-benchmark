// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.tensorflow.framework.meta_graph

/** Information about a Tensor necessary for feeding or retrieval.
  */
@SerialVersionUID(0L)
final case class TensorInfo(
    name: _root_.scala.Predef.String = "",
    dtype: org.tensorflow.framework.types.DataType = org.tensorflow.framework.types.DataType.DT_INVALID,
    tensorShape: scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[TensorInfo] with scalapb.lenses.Updatable[TensorInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (name != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, name) }
      if (dtype != org.tensorflow.framework.types.DataType.DT_INVALID) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, dtype.value) }
      if (tensorShape.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(tensorShape.get.serializedSize) + tensorShape.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = name
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = dtype
        if (__v != org.tensorflow.framework.types.DataType.DT_INVALID) {
          _output__.writeEnum(2, __v.value)
        }
      };
      tensorShape.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.tensorflow.framework.meta_graph.TensorInfo = {
      var __name = this.name
      var __dtype = this.dtype
      var __tensorShape = this.tensorShape
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __name = _input__.readString()
          case 16 =>
            __dtype = org.tensorflow.framework.types.DataType.fromValue(_input__.readEnum())
          case 26 =>
            __tensorShape = Option(_root_.scalapb.LiteParser.readMessage(_input__, __tensorShape.getOrElse(org.tensorflow.framework.tensor_shape.TensorShapeProto.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      org.tensorflow.framework.meta_graph.TensorInfo(
          name = __name,
          dtype = __dtype,
          tensorShape = __tensorShape
      )
    }
    def withName(__v: _root_.scala.Predef.String): TensorInfo = copy(name = __v)
    def withDtype(__v: org.tensorflow.framework.types.DataType): TensorInfo = copy(dtype = __v)
    def getTensorShape: org.tensorflow.framework.tensor_shape.TensorShapeProto = tensorShape.getOrElse(org.tensorflow.framework.tensor_shape.TensorShapeProto.defaultInstance)
    def clearTensorShape: TensorInfo = copy(tensorShape = None)
    def withTensorShape(__v: org.tensorflow.framework.tensor_shape.TensorShapeProto): TensorInfo = copy(tensorShape = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = dtype.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 3 => tensorShape.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PEnum(dtype.scalaValueDescriptor)
        case 3 => tensorShape.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.tensorflow.framework.meta_graph.TensorInfo
}

object TensorInfo extends scalapb.GeneratedMessageCompanion[org.tensorflow.framework.meta_graph.TensorInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.tensorflow.framework.meta_graph.TensorInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.tensorflow.framework.meta_graph.TensorInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.tensorflow.framework.meta_graph.TensorInfo(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      org.tensorflow.framework.types.DataType.fromValue(__fieldsMap.getOrElse(__fields.get(1), org.tensorflow.framework.types.DataType.DT_INVALID.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.tensorflow.framework.meta_graph.TensorInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.tensorflow.framework.meta_graph.TensorInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        org.tensorflow.framework.types.DataType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(org.tensorflow.framework.types.DataType.DT_INVALID.scalaValueDescriptor).number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MetaGraphProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MetaGraphProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = org.tensorflow.framework.tensor_shape.TensorShapeProto
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => org.tensorflow.framework.types.DataType
    }
  }
  lazy val defaultInstance = org.tensorflow.framework.meta_graph.TensorInfo(
  )
  implicit class TensorInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.meta_graph.TensorInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.tensorflow.framework.meta_graph.TensorInfo](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def dtype: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.types.DataType] = field(_.dtype)((c_, f_) => c_.copy(dtype = f_))
    def tensorShape: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.tensor_shape.TensorShapeProto] = field(_.getTensorShape)((c_, f_) => c_.copy(tensorShape = Option(f_)))
    def optionalTensorShape: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[org.tensorflow.framework.tensor_shape.TensorShapeProto]] = field(_.tensorShape)((c_, f_) => c_.copy(tensorShape = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val DTYPE_FIELD_NUMBER = 2
  final val TENSOR_SHAPE_FIELD_NUMBER = 3
}
