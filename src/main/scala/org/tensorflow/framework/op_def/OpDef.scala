// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.tensorflow.framework.op_def

/** Defines an operation. A NodeDef in a GraphDef specifies an Op by
  * using the "op" field which should match the name of a OpDef.
  *
  * @param name
  *   Op names starting with an underscore are reserved for internal use.
  *   Names should be CamelCase and match the regexp "[A-Z][a-zA-Z0-9_]*".
  * @param inputArg
  *   Description of the input(s).
  * @param outputArg
  *   Description of the output(s).
  * @param deprecation
  *   Optional deprecation based on GraphDef versions.
  * @param summary
  *   One-line human-readable description of what the Op does.
  * @param description
  *   Additional, longer human-readable description of what the Op does.
  * @param isCommutative
  *   True if the operation is commutative ("op(a,b) == op(b,a)" for all inputs)
  * @param isAggregate
  *   If is_aggregate is true, then this operation accepts N &gt;= 2
  *   inputs and produces 1 output all of the same type.  Should be
  *   associative and commutative, and produce output with the same
  *   shape as the input.  The optimizer may replace an aggregate op
  *   taking input from multiple devices with a tree of aggregate ops
  *   that aggregate locally within each device (and possibly within
  *   groups of nearby devices) before communicating.
  *   TODO(josh11b): Implement that optimization.
  *   for things like add
  * @param isStateful
  *   By default Ops may be moved between devices.  Stateful ops should
  *   either not be moved, or should only be moved if that state can also
  *   be moved (e.g. via some sort of save / restore).
  *   Stateful ops are guaranteed to never be optimized away by Common
  *   Subexpression Elimination (CSE).
  *   for things like variables, queue
  * @param allowsUninitializedInput
  *   By default, all inputs to an Op must be initialized Tensors.  Ops
  *   that may initialize tensors for the first time should set this
  *   field to true, to allow the Op to take an uninitialized Tensor as
  *   input.
  *   for Assign, etc.
  */
@SerialVersionUID(0L)
final case class OpDef(
    name: _root_.scala.Predef.String = "",
    inputArg: _root_.scala.collection.Seq[org.tensorflow.framework.op_def.OpDef.ArgDef] = _root_.scala.collection.Seq.empty,
    outputArg: _root_.scala.collection.Seq[org.tensorflow.framework.op_def.OpDef.ArgDef] = _root_.scala.collection.Seq.empty,
    attr: _root_.scala.collection.Seq[org.tensorflow.framework.op_def.OpDef.AttrDef] = _root_.scala.collection.Seq.empty,
    deprecation: scala.Option[org.tensorflow.framework.op_def.OpDeprecation] = None,
    summary: _root_.scala.Predef.String = "",
    description: _root_.scala.Predef.String = "",
    isCommutative: _root_.scala.Boolean = false,
    isAggregate: _root_.scala.Boolean = false,
    isStateful: _root_.scala.Boolean = false,
    allowsUninitializedInput: _root_.scala.Boolean = false
    ) extends scalapb.GeneratedMessage with scalapb.Message[OpDef] with scalapb.lenses.Updatable[OpDef] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (name != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, name) }
      inputArg.foreach(inputArg => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(inputArg.serializedSize) + inputArg.serializedSize)
      outputArg.foreach(outputArg => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(outputArg.serializedSize) + outputArg.serializedSize)
      attr.foreach(attr => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(attr.serializedSize) + attr.serializedSize)
      if (deprecation.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(deprecation.get.serializedSize) + deprecation.get.serializedSize }
      if (summary != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, summary) }
      if (description != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, description) }
      if (isCommutative != false) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(18, isCommutative) }
      if (isAggregate != false) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(16, isAggregate) }
      if (isStateful != false) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(17, isStateful) }
      if (allowsUninitializedInput != false) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(19, allowsUninitializedInput) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = name
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      inputArg.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      outputArg.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      attr.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = summary
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = description
        if (__v != "") {
          _output__.writeString(6, __v)
        }
      };
      deprecation.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = isAggregate
        if (__v != false) {
          _output__.writeBool(16, __v)
        }
      };
      {
        val __v = isStateful
        if (__v != false) {
          _output__.writeBool(17, __v)
        }
      };
      {
        val __v = isCommutative
        if (__v != false) {
          _output__.writeBool(18, __v)
        }
      };
      {
        val __v = allowsUninitializedInput
        if (__v != false) {
          _output__.writeBool(19, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.tensorflow.framework.op_def.OpDef = {
      var __name = this.name
      val __inputArg = (_root_.scala.collection.immutable.Vector.newBuilder[org.tensorflow.framework.op_def.OpDef.ArgDef] ++= this.inputArg)
      val __outputArg = (_root_.scala.collection.immutable.Vector.newBuilder[org.tensorflow.framework.op_def.OpDef.ArgDef] ++= this.outputArg)
      val __attr = (_root_.scala.collection.immutable.Vector.newBuilder[org.tensorflow.framework.op_def.OpDef.AttrDef] ++= this.attr)
      var __deprecation = this.deprecation
      var __summary = this.summary
      var __description = this.description
      var __isCommutative = this.isCommutative
      var __isAggregate = this.isAggregate
      var __isStateful = this.isStateful
      var __allowsUninitializedInput = this.allowsUninitializedInput
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __name = _input__.readString()
          case 18 =>
            __inputArg += _root_.scalapb.LiteParser.readMessage(_input__, org.tensorflow.framework.op_def.OpDef.ArgDef.defaultInstance)
          case 26 =>
            __outputArg += _root_.scalapb.LiteParser.readMessage(_input__, org.tensorflow.framework.op_def.OpDef.ArgDef.defaultInstance)
          case 34 =>
            __attr += _root_.scalapb.LiteParser.readMessage(_input__, org.tensorflow.framework.op_def.OpDef.AttrDef.defaultInstance)
          case 66 =>
            __deprecation = Option(_root_.scalapb.LiteParser.readMessage(_input__, __deprecation.getOrElse(org.tensorflow.framework.op_def.OpDeprecation.defaultInstance)))
          case 42 =>
            __summary = _input__.readString()
          case 50 =>
            __description = _input__.readString()
          case 144 =>
            __isCommutative = _input__.readBool()
          case 128 =>
            __isAggregate = _input__.readBool()
          case 136 =>
            __isStateful = _input__.readBool()
          case 152 =>
            __allowsUninitializedInput = _input__.readBool()
          case tag => _input__.skipField(tag)
        }
      }
      org.tensorflow.framework.op_def.OpDef(
          name = __name,
          inputArg = __inputArg.result(),
          outputArg = __outputArg.result(),
          attr = __attr.result(),
          deprecation = __deprecation,
          summary = __summary,
          description = __description,
          isCommutative = __isCommutative,
          isAggregate = __isAggregate,
          isStateful = __isStateful,
          allowsUninitializedInput = __allowsUninitializedInput
      )
    }
    def withName(__v: _root_.scala.Predef.String): OpDef = copy(name = __v)
    def clearInputArg = copy(inputArg = _root_.scala.collection.Seq.empty)
    def addInputArg(__vs: org.tensorflow.framework.op_def.OpDef.ArgDef*): OpDef = addAllInputArg(__vs)
    def addAllInputArg(__vs: TraversableOnce[org.tensorflow.framework.op_def.OpDef.ArgDef]): OpDef = copy(inputArg = inputArg ++ __vs)
    def withInputArg(__v: _root_.scala.collection.Seq[org.tensorflow.framework.op_def.OpDef.ArgDef]): OpDef = copy(inputArg = __v)
    def clearOutputArg = copy(outputArg = _root_.scala.collection.Seq.empty)
    def addOutputArg(__vs: org.tensorflow.framework.op_def.OpDef.ArgDef*): OpDef = addAllOutputArg(__vs)
    def addAllOutputArg(__vs: TraversableOnce[org.tensorflow.framework.op_def.OpDef.ArgDef]): OpDef = copy(outputArg = outputArg ++ __vs)
    def withOutputArg(__v: _root_.scala.collection.Seq[org.tensorflow.framework.op_def.OpDef.ArgDef]): OpDef = copy(outputArg = __v)
    def clearAttr = copy(attr = _root_.scala.collection.Seq.empty)
    def addAttr(__vs: org.tensorflow.framework.op_def.OpDef.AttrDef*): OpDef = addAllAttr(__vs)
    def addAllAttr(__vs: TraversableOnce[org.tensorflow.framework.op_def.OpDef.AttrDef]): OpDef = copy(attr = attr ++ __vs)
    def withAttr(__v: _root_.scala.collection.Seq[org.tensorflow.framework.op_def.OpDef.AttrDef]): OpDef = copy(attr = __v)
    def getDeprecation: org.tensorflow.framework.op_def.OpDeprecation = deprecation.getOrElse(org.tensorflow.framework.op_def.OpDeprecation.defaultInstance)
    def clearDeprecation: OpDef = copy(deprecation = None)
    def withDeprecation(__v: org.tensorflow.framework.op_def.OpDeprecation): OpDef = copy(deprecation = Option(__v))
    def withSummary(__v: _root_.scala.Predef.String): OpDef = copy(summary = __v)
    def withDescription(__v: _root_.scala.Predef.String): OpDef = copy(description = __v)
    def withIsCommutative(__v: _root_.scala.Boolean): OpDef = copy(isCommutative = __v)
    def withIsAggregate(__v: _root_.scala.Boolean): OpDef = copy(isAggregate = __v)
    def withIsStateful(__v: _root_.scala.Boolean): OpDef = copy(isStateful = __v)
    def withAllowsUninitializedInput(__v: _root_.scala.Boolean): OpDef = copy(allowsUninitializedInput = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => inputArg
        case 3 => outputArg
        case 4 => attr
        case 8 => deprecation.orNull
        case 5 => {
          val __t = summary
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = description
          if (__t != "") __t else null
        }
        case 18 => {
          val __t = isCommutative
          if (__t != false) __t else null
        }
        case 16 => {
          val __t = isAggregate
          if (__t != false) __t else null
        }
        case 17 => {
          val __t = isStateful
          if (__t != false) __t else null
        }
        case 19 => {
          val __t = allowsUninitializedInput
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PRepeated(inputArg.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 3 => _root_.scalapb.descriptors.PRepeated(outputArg.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 4 => _root_.scalapb.descriptors.PRepeated(attr.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 8 => deprecation.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => _root_.scalapb.descriptors.PString(summary)
        case 6 => _root_.scalapb.descriptors.PString(description)
        case 18 => _root_.scalapb.descriptors.PBoolean(isCommutative)
        case 16 => _root_.scalapb.descriptors.PBoolean(isAggregate)
        case 17 => _root_.scalapb.descriptors.PBoolean(isStateful)
        case 19 => _root_.scalapb.descriptors.PBoolean(allowsUninitializedInput)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.tensorflow.framework.op_def.OpDef
}

object OpDef extends scalapb.GeneratedMessageCompanion[org.tensorflow.framework.op_def.OpDef] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.tensorflow.framework.op_def.OpDef] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.tensorflow.framework.op_def.OpDef = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.tensorflow.framework.op_def.OpDef(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[org.tensorflow.framework.op_def.OpDef.ArgDef]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[org.tensorflow.framework.op_def.OpDef.ArgDef]],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[org.tensorflow.framework.op_def.OpDef.AttrDef]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[org.tensorflow.framework.op_def.OpDeprecation]],
      __fieldsMap.getOrElse(__fields.get(5), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(6), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(7), false).asInstanceOf[_root_.scala.Boolean],
      __fieldsMap.getOrElse(__fields.get(8), false).asInstanceOf[_root_.scala.Boolean],
      __fieldsMap.getOrElse(__fields.get(9), false).asInstanceOf[_root_.scala.Boolean],
      __fieldsMap.getOrElse(__fields.get(10), false).asInstanceOf[_root_.scala.Boolean]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.tensorflow.framework.op_def.OpDef] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.tensorflow.framework.op_def.OpDef(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[org.tensorflow.framework.op_def.OpDef.ArgDef]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[org.tensorflow.framework.op_def.OpDef.ArgDef]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[org.tensorflow.framework.op_def.OpDef.AttrDef]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[org.tensorflow.framework.op_def.OpDeprecation]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = OpDefProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = OpDefProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = org.tensorflow.framework.op_def.OpDef.ArgDef
      case 3 => __out = org.tensorflow.framework.op_def.OpDef.ArgDef
      case 4 => __out = org.tensorflow.framework.op_def.OpDef.AttrDef
      case 8 => __out = org.tensorflow.framework.op_def.OpDeprecation
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
    _root_.org.tensorflow.framework.op_def.OpDef.ArgDef,
    _root_.org.tensorflow.framework.op_def.OpDef.AttrDef
  )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.tensorflow.framework.op_def.OpDef(
  )
  /** For describing inputs and outputs.
    *
    * @param name
    *   Name for the input/output.  Should match the regexp "[a-z][a-z0-9_]*".
    * @param description
    *   Human readable description.
    * @param type
    *   Describes the type of one or more tensors that are accepted/produced
    *   by this input/output arg.  The only legal combinations are:
    *   * For a single tensor: either the "type" field is set or the
    *     "type_attr" field is set to the name of an attr with type "type".
    *   * For a sequence of tensors with the same type: the "number_attr"
    *     field will be set to the name of an attr with type "int", and
    *     either the "type" or "type_attr" field will be set as for
    *     single tensors.
    *   * For a sequence of tensors, the "type_list_attr" field will be set
    *     to the name of an attr with type "list(type)".
    * @param typeAttr
    *   if specified, attr must have type "type"
    * @param numberAttr
    *   if specified, attr must have type "int"
    * @param typeListAttr
    *   If specified, attr must have type "list(type)", and none of
    *   type, type_attr, and number_attr may be specified.
    * @param isRef
    *   For inputs: if true, the inputs are required to be refs.
    *     By default, inputs can be either refs or non-refs.
    *   For outputs: if true, outputs are refs, otherwise they are not.
    */
  @SerialVersionUID(0L)
  final case class ArgDef(
      name: _root_.scala.Predef.String = "",
      description: _root_.scala.Predef.String = "",
      `type`: org.tensorflow.framework.types.DataType = org.tensorflow.framework.types.DataType.DT_INVALID,
      typeAttr: _root_.scala.Predef.String = "",
      numberAttr: _root_.scala.Predef.String = "",
      typeListAttr: _root_.scala.Predef.String = "",
      isRef: _root_.scala.Boolean = false
      ) extends scalapb.GeneratedMessage with scalapb.Message[ArgDef] with scalapb.lenses.Updatable[ArgDef] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (name != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, name) }
        if (description != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, description) }
        if (`type` != org.tensorflow.framework.types.DataType.DT_INVALID) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(3, `type`.value) }
        if (typeAttr != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, typeAttr) }
        if (numberAttr != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, numberAttr) }
        if (typeListAttr != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, typeListAttr) }
        if (isRef != false) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(16, isRef) }
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = name
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = description
          if (__v != "") {
            _output__.writeString(2, __v)
          }
        };
        {
          val __v = `type`
          if (__v != org.tensorflow.framework.types.DataType.DT_INVALID) {
            _output__.writeEnum(3, __v.value)
          }
        };
        {
          val __v = typeAttr
          if (__v != "") {
            _output__.writeString(4, __v)
          }
        };
        {
          val __v = numberAttr
          if (__v != "") {
            _output__.writeString(5, __v)
          }
        };
        {
          val __v = typeListAttr
          if (__v != "") {
            _output__.writeString(6, __v)
          }
        };
        {
          val __v = isRef
          if (__v != false) {
            _output__.writeBool(16, __v)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.tensorflow.framework.op_def.OpDef.ArgDef = {
        var __name = this.name
        var __description = this.description
        var __type = this.`type`
        var __typeAttr = this.typeAttr
        var __numberAttr = this.numberAttr
        var __typeListAttr = this.typeListAttr
        var __isRef = this.isRef
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __name = _input__.readString()
            case 18 =>
              __description = _input__.readString()
            case 24 =>
              __type = org.tensorflow.framework.types.DataType.fromValue(_input__.readEnum())
            case 34 =>
              __typeAttr = _input__.readString()
            case 42 =>
              __numberAttr = _input__.readString()
            case 50 =>
              __typeListAttr = _input__.readString()
            case 128 =>
              __isRef = _input__.readBool()
            case tag => _input__.skipField(tag)
          }
        }
        org.tensorflow.framework.op_def.OpDef.ArgDef(
            name = __name,
            description = __description,
            `type` = __type,
            typeAttr = __typeAttr,
            numberAttr = __numberAttr,
            typeListAttr = __typeListAttr,
            isRef = __isRef
        )
      }
      def withName(__v: _root_.scala.Predef.String): ArgDef = copy(name = __v)
      def withDescription(__v: _root_.scala.Predef.String): ArgDef = copy(description = __v)
      def withType(__v: org.tensorflow.framework.types.DataType): ArgDef = copy(`type` = __v)
      def withTypeAttr(__v: _root_.scala.Predef.String): ArgDef = copy(typeAttr = __v)
      def withNumberAttr(__v: _root_.scala.Predef.String): ArgDef = copy(numberAttr = __v)
      def withTypeListAttr(__v: _root_.scala.Predef.String): ArgDef = copy(typeListAttr = __v)
      def withIsRef(__v: _root_.scala.Boolean): ArgDef = copy(isRef = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = name
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = description
            if (__t != "") __t else null
          }
          case 3 => {
            val __t = `type`.javaValueDescriptor
            if (__t.getNumber() != 0) __t else null
          }
          case 4 => {
            val __t = typeAttr
            if (__t != "") __t else null
          }
          case 5 => {
            val __t = numberAttr
            if (__t != "") __t else null
          }
          case 6 => {
            val __t = typeListAttr
            if (__t != "") __t else null
          }
          case 16 => {
            val __t = isRef
            if (__t != false) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(name)
          case 2 => _root_.scalapb.descriptors.PString(description)
          case 3 => _root_.scalapb.descriptors.PEnum(`type`.scalaValueDescriptor)
          case 4 => _root_.scalapb.descriptors.PString(typeAttr)
          case 5 => _root_.scalapb.descriptors.PString(numberAttr)
          case 6 => _root_.scalapb.descriptors.PString(typeListAttr)
          case 16 => _root_.scalapb.descriptors.PBoolean(isRef)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.tensorflow.framework.op_def.OpDef.ArgDef
  }
  
  object ArgDef extends scalapb.GeneratedMessageCompanion[org.tensorflow.framework.op_def.OpDef.ArgDef] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.tensorflow.framework.op_def.OpDef.ArgDef] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.tensorflow.framework.op_def.OpDef.ArgDef = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.tensorflow.framework.op_def.OpDef.ArgDef(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
        org.tensorflow.framework.types.DataType.fromValue(__fieldsMap.getOrElse(__fields.get(2), org.tensorflow.framework.types.DataType.DT_INVALID.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
        __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.getOrElse(__fields.get(5), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.getOrElse(__fields.get(6), false).asInstanceOf[_root_.scala.Boolean]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.tensorflow.framework.op_def.OpDef.ArgDef] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.tensorflow.framework.op_def.OpDef.ArgDef(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          org.tensorflow.framework.types.DataType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(org.tensorflow.framework.types.DataType.DT_INVALID.scalaValueDescriptor).number),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.op_def.OpDef.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.op_def.OpDef.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => org.tensorflow.framework.types.DataType
      }
    }
    lazy val defaultInstance = org.tensorflow.framework.op_def.OpDef.ArgDef(
    )
    implicit class ArgDefLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.op_def.OpDef.ArgDef]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.tensorflow.framework.op_def.OpDef.ArgDef](_l) {
      def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
      def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.description)((c_, f_) => c_.copy(description = f_))
      def `type`: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.types.DataType] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
      def typeAttr: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.typeAttr)((c_, f_) => c_.copy(typeAttr = f_))
      def numberAttr: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.numberAttr)((c_, f_) => c_.copy(numberAttr = f_))
      def typeListAttr: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.typeListAttr)((c_, f_) => c_.copy(typeListAttr = f_))
      def isRef: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isRef)((c_, f_) => c_.copy(isRef = f_))
    }
    final val NAME_FIELD_NUMBER = 1
    final val DESCRIPTION_FIELD_NUMBER = 2
    final val TYPE_FIELD_NUMBER = 3
    final val TYPE_ATTR_FIELD_NUMBER = 4
    final val NUMBER_ATTR_FIELD_NUMBER = 5
    final val TYPE_LIST_ATTR_FIELD_NUMBER = 6
    final val IS_REF_FIELD_NUMBER = 16
  }
  
  /** Description of the graph-construction-time configuration of this
    * Op.  That is to say, this describes the attr fields that will
    * be specified in the NodeDef.
    *
    * @param name
    *   A descriptive name for the argument.  May be used, e.g. by the
    *   Python client, as a keyword argument name, and so should match
    *   the regexp "[a-z][a-z0-9_]+".
    * @param type
    *   One of the type names from attr_value.proto ("string", "list(string)",
    *   "int", etc.).
    * @param defaultValue
    *   A reasonable default for this attribute if the user does not supply
    *   a value.  If not specified, the user must supply a value.
    * @param description
    *   Human-readable description.
    * @param hasMinimum
    *   For type == "int", this is a minimum value.  For "list(___)"
    *   types, this is the minimum length.
    * @param allowedValues
    *   The set of allowed values.  Has type that is the "list" version
    *   of the "type" field above (uses the "list" field of AttrValue).
    *   If type == "type" or "list(type)" above, then the "type" field
    *   of "allowed_values.list" has the set of allowed DataTypes.
    *   If type == "string" or "list(string)", then the "s" field of
    *   "allowed_values.list" has the set of allowed strings.
    */
  @SerialVersionUID(0L)
  final case class AttrDef(
      name: _root_.scala.Predef.String = "",
      `type`: _root_.scala.Predef.String = "",
      defaultValue: scala.Option[org.tensorflow.framework.attr_value.AttrValue] = None,
      description: _root_.scala.Predef.String = "",
      hasMinimum: _root_.scala.Boolean = false,
      minimum: _root_.scala.Long = 0L,
      allowedValues: scala.Option[org.tensorflow.framework.attr_value.AttrValue] = None
      ) extends scalapb.GeneratedMessage with scalapb.Message[AttrDef] with scalapb.lenses.Updatable[AttrDef] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (name != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, name) }
        if (`type` != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, `type`) }
        if (defaultValue.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(defaultValue.get.serializedSize) + defaultValue.get.serializedSize }
        if (description != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, description) }
        if (hasMinimum != false) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, hasMinimum) }
        if (minimum != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, minimum) }
        if (allowedValues.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(allowedValues.get.serializedSize) + allowedValues.get.serializedSize }
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = name
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = `type`
          if (__v != "") {
            _output__.writeString(2, __v)
          }
        };
        defaultValue.foreach { __v =>
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        {
          val __v = description
          if (__v != "") {
            _output__.writeString(4, __v)
          }
        };
        {
          val __v = hasMinimum
          if (__v != false) {
            _output__.writeBool(5, __v)
          }
        };
        {
          val __v = minimum
          if (__v != 0L) {
            _output__.writeInt64(6, __v)
          }
        };
        allowedValues.foreach { __v =>
          _output__.writeTag(7, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.tensorflow.framework.op_def.OpDef.AttrDef = {
        var __name = this.name
        var __type = this.`type`
        var __defaultValue = this.defaultValue
        var __description = this.description
        var __hasMinimum = this.hasMinimum
        var __minimum = this.minimum
        var __allowedValues = this.allowedValues
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __name = _input__.readString()
            case 18 =>
              __type = _input__.readString()
            case 26 =>
              __defaultValue = Option(_root_.scalapb.LiteParser.readMessage(_input__, __defaultValue.getOrElse(org.tensorflow.framework.attr_value.AttrValue.defaultInstance)))
            case 34 =>
              __description = _input__.readString()
            case 40 =>
              __hasMinimum = _input__.readBool()
            case 48 =>
              __minimum = _input__.readInt64()
            case 58 =>
              __allowedValues = Option(_root_.scalapb.LiteParser.readMessage(_input__, __allowedValues.getOrElse(org.tensorflow.framework.attr_value.AttrValue.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        org.tensorflow.framework.op_def.OpDef.AttrDef(
            name = __name,
            `type` = __type,
            defaultValue = __defaultValue,
            description = __description,
            hasMinimum = __hasMinimum,
            minimum = __minimum,
            allowedValues = __allowedValues
        )
      }
      def withName(__v: _root_.scala.Predef.String): AttrDef = copy(name = __v)
      def withType(__v: _root_.scala.Predef.String): AttrDef = copy(`type` = __v)
      def getDefaultValue: org.tensorflow.framework.attr_value.AttrValue = defaultValue.getOrElse(org.tensorflow.framework.attr_value.AttrValue.defaultInstance)
      def clearDefaultValue: AttrDef = copy(defaultValue = None)
      def withDefaultValue(__v: org.tensorflow.framework.attr_value.AttrValue): AttrDef = copy(defaultValue = Option(__v))
      def withDescription(__v: _root_.scala.Predef.String): AttrDef = copy(description = __v)
      def withHasMinimum(__v: _root_.scala.Boolean): AttrDef = copy(hasMinimum = __v)
      def withMinimum(__v: _root_.scala.Long): AttrDef = copy(minimum = __v)
      def getAllowedValues: org.tensorflow.framework.attr_value.AttrValue = allowedValues.getOrElse(org.tensorflow.framework.attr_value.AttrValue.defaultInstance)
      def clearAllowedValues: AttrDef = copy(allowedValues = None)
      def withAllowedValues(__v: org.tensorflow.framework.attr_value.AttrValue): AttrDef = copy(allowedValues = Option(__v))
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = name
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = `type`
            if (__t != "") __t else null
          }
          case 3 => defaultValue.orNull
          case 4 => {
            val __t = description
            if (__t != "") __t else null
          }
          case 5 => {
            val __t = hasMinimum
            if (__t != false) __t else null
          }
          case 6 => {
            val __t = minimum
            if (__t != 0L) __t else null
          }
          case 7 => allowedValues.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(name)
          case 2 => _root_.scalapb.descriptors.PString(`type`)
          case 3 => defaultValue.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => _root_.scalapb.descriptors.PString(description)
          case 5 => _root_.scalapb.descriptors.PBoolean(hasMinimum)
          case 6 => _root_.scalapb.descriptors.PLong(minimum)
          case 7 => allowedValues.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.tensorflow.framework.op_def.OpDef.AttrDef
  }
  
  object AttrDef extends scalapb.GeneratedMessageCompanion[org.tensorflow.framework.op_def.OpDef.AttrDef] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.tensorflow.framework.op_def.OpDef.AttrDef] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.tensorflow.framework.op_def.OpDef.AttrDef = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.tensorflow.framework.op_def.OpDef.AttrDef(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[org.tensorflow.framework.attr_value.AttrValue]],
        __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.getOrElse(__fields.get(4), false).asInstanceOf[_root_.scala.Boolean],
        __fieldsMap.getOrElse(__fields.get(5), 0L).asInstanceOf[_root_.scala.Long],
        __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[org.tensorflow.framework.attr_value.AttrValue]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.tensorflow.framework.op_def.OpDef.AttrDef] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.tensorflow.framework.op_def.OpDef.AttrDef(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[org.tensorflow.framework.attr_value.AttrValue]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[org.tensorflow.framework.attr_value.AttrValue]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.op_def.OpDef.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.op_def.OpDef.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 3 => __out = org.tensorflow.framework.attr_value.AttrValue
        case 7 => __out = org.tensorflow.framework.attr_value.AttrValue
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.tensorflow.framework.op_def.OpDef.AttrDef(
    )
    implicit class AttrDefLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.op_def.OpDef.AttrDef]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.tensorflow.framework.op_def.OpDef.AttrDef](_l) {
      def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
      def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
      def defaultValue: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.attr_value.AttrValue] = field(_.getDefaultValue)((c_, f_) => c_.copy(defaultValue = Option(f_)))
      def optionalDefaultValue: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[org.tensorflow.framework.attr_value.AttrValue]] = field(_.defaultValue)((c_, f_) => c_.copy(defaultValue = f_))
      def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.description)((c_, f_) => c_.copy(description = f_))
      def hasMinimum: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.hasMinimum)((c_, f_) => c_.copy(hasMinimum = f_))
      def minimum: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.minimum)((c_, f_) => c_.copy(minimum = f_))
      def allowedValues: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.attr_value.AttrValue] = field(_.getAllowedValues)((c_, f_) => c_.copy(allowedValues = Option(f_)))
      def optionalAllowedValues: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[org.tensorflow.framework.attr_value.AttrValue]] = field(_.allowedValues)((c_, f_) => c_.copy(allowedValues = f_))
    }
    final val NAME_FIELD_NUMBER = 1
    final val TYPE_FIELD_NUMBER = 2
    final val DEFAULT_VALUE_FIELD_NUMBER = 3
    final val DESCRIPTION_FIELD_NUMBER = 4
    final val HAS_MINIMUM_FIELD_NUMBER = 5
    final val MINIMUM_FIELD_NUMBER = 6
    final val ALLOWED_VALUES_FIELD_NUMBER = 7
  }
  
  implicit class OpDefLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.op_def.OpDef]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.tensorflow.framework.op_def.OpDef](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def inputArg: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.tensorflow.framework.op_def.OpDef.ArgDef]] = field(_.inputArg)((c_, f_) => c_.copy(inputArg = f_))
    def outputArg: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.tensorflow.framework.op_def.OpDef.ArgDef]] = field(_.outputArg)((c_, f_) => c_.copy(outputArg = f_))
    def attr: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.tensorflow.framework.op_def.OpDef.AttrDef]] = field(_.attr)((c_, f_) => c_.copy(attr = f_))
    def deprecation: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.op_def.OpDeprecation] = field(_.getDeprecation)((c_, f_) => c_.copy(deprecation = Option(f_)))
    def optionalDeprecation: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[org.tensorflow.framework.op_def.OpDeprecation]] = field(_.deprecation)((c_, f_) => c_.copy(deprecation = f_))
    def summary: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.summary)((c_, f_) => c_.copy(summary = f_))
    def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.description)((c_, f_) => c_.copy(description = f_))
    def isCommutative: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isCommutative)((c_, f_) => c_.copy(isCommutative = f_))
    def isAggregate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isAggregate)((c_, f_) => c_.copy(isAggregate = f_))
    def isStateful: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isStateful)((c_, f_) => c_.copy(isStateful = f_))
    def allowsUninitializedInput: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.allowsUninitializedInput)((c_, f_) => c_.copy(allowsUninitializedInput = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val INPUT_ARG_FIELD_NUMBER = 2
  final val OUTPUT_ARG_FIELD_NUMBER = 3
  final val ATTR_FIELD_NUMBER = 4
  final val DEPRECATION_FIELD_NUMBER = 8
  final val SUMMARY_FIELD_NUMBER = 5
  final val DESCRIPTION_FIELD_NUMBER = 6
  final val IS_COMMUTATIVE_FIELD_NUMBER = 18
  final val IS_AGGREGATE_FIELD_NUMBER = 16
  final val IS_STATEFUL_FIELD_NUMBER = 17
  final val ALLOWS_UNINITIALIZED_INPUT_FIELD_NUMBER = 19
}
