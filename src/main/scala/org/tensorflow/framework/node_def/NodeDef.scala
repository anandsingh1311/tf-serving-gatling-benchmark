// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.tensorflow.framework.node_def

/** @param name
  *   The name given to this operator. Used for naming inputs,
  *   logging, visualization, etc.  Unique within a single GraphDef.
  *   Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_./]*".
  * @param op
  *   The operation name.  There may be custom parameters in attrs.
  *   Op names starting with an underscore are reserved for internal use.
  * @param input
  *   Each input is "node:src_output" with "node" being a string name and
  *   "src_output" indicating which output tensor to use from "node". If
  *   "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
  *   may optionally be followed by control inputs that have the format
  *   "^node".
  * @param device
  *   A (possibly partial) specification for the device on which this
  *   node should be placed.
  *   The expected syntax for this string is as follows:
  *  
  *   DEVICE_SPEC ::= COLOCATED_NODE | PARTIAL_SPEC
  *  
  *   COLOCATED_NODE ::= "&#64;" NODE_NAME  // See NodeDef.name above.
  *   PARTIAL_SPEC ::= ("/" CONSTRAINT) *
  *   CONSTRAINT ::= ("job:" JOB_NAME)
  *                | ("replica:" [1-9][0-9]*)
  *                | ("task:" [1-9][0-9]*)
  *                | ( ("gpu" | "cpu") ":" ([1-9][0-9]* | "*") )
  *  
  *   Valid values for this string include:
  *   * "&#64;other/node"                         (colocate with "other/node")
  *   * "/job:worker/replica:0/task:1/gpu:3"  (full specification)
  *   * "/job:worker/gpu:3"                   (partial specification)
  *   * ""                                    (no specification)
  *  
  *   If the constraints do not resolve to a single device (or if this
  *   field is empty or not present), the runtime will attempt to
  *   choose a device automatically.
  * @param attr
  *   Operation-specific graph-construction-time configuration.
  *   Note that this should include all attrs defined in the
  *   corresponding OpDef, including those with a value matching
  *   the default -- this allows the default to change and makes
  *   NodeDefs easier to interpret on their own.  However, if
  *   an attr with a default is not specified in this list, the
  *   default will be used.
  *   The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
  *   one of the names from the corresponding OpDef's attr field).
  *   The values must have a type matching the corresponding OpDef
  *   attr's type field.
  *   TODO(josh11b): Add some examples here showing best practices.
  */
@SerialVersionUID(0L)
final case class NodeDef(
    name: _root_.scala.Predef.String = "",
    op: _root_.scala.Predef.String = "",
    input: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    device: _root_.scala.Predef.String = "",
    attr: scala.collection.immutable.Map[_root_.scala.Predef.String, org.tensorflow.framework.attr_value.AttrValue] = scala.collection.immutable.Map.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[NodeDef] with scalapb.lenses.Updatable[NodeDef] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (name != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, name) }
      if (op != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, op) }
      input.foreach(input => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, input))
      if (device != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, device) }
      attr.foreach(attr => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(org.tensorflow.framework.node_def.NodeDef._typemapper_attr.toBase(attr).serializedSize) + org.tensorflow.framework.node_def.NodeDef._typemapper_attr.toBase(attr).serializedSize)
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = name
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = op
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      input.foreach { __v =>
        _output__.writeString(3, __v)
      };
      {
        val __v = device
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      attr.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(org.tensorflow.framework.node_def.NodeDef._typemapper_attr.toBase(__v).serializedSize)
        org.tensorflow.framework.node_def.NodeDef._typemapper_attr.toBase(__v).writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.tensorflow.framework.node_def.NodeDef = {
      var __name = this.name
      var __op = this.op
      val __input = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.input)
      var __device = this.device
      val __attr = (scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, org.tensorflow.framework.attr_value.AttrValue] ++= this.attr)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __name = _input__.readString()
          case 18 =>
            __op = _input__.readString()
          case 26 =>
            __input += _input__.readString()
          case 34 =>
            __device = _input__.readString()
          case 42 =>
            __attr += org.tensorflow.framework.node_def.NodeDef._typemapper_attr.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, org.tensorflow.framework.node_def.NodeDef.AttrEntry.defaultInstance))
          case tag => _input__.skipField(tag)
        }
      }
      org.tensorflow.framework.node_def.NodeDef(
          name = __name,
          op = __op,
          input = __input.result(),
          device = __device,
          attr = __attr.result()
      )
    }
    def withName(__v: _root_.scala.Predef.String): NodeDef = copy(name = __v)
    def withOp(__v: _root_.scala.Predef.String): NodeDef = copy(op = __v)
    def clearInput = copy(input = _root_.scala.collection.Seq.empty)
    def addInput(__vs: _root_.scala.Predef.String*): NodeDef = addAllInput(__vs)
    def addAllInput(__vs: TraversableOnce[_root_.scala.Predef.String]): NodeDef = copy(input = input ++ __vs)
    def withInput(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): NodeDef = copy(input = __v)
    def withDevice(__v: _root_.scala.Predef.String): NodeDef = copy(device = __v)
    def clearAttr = copy(attr = scala.collection.immutable.Map.empty)
    def addAttr(__vs: (_root_.scala.Predef.String, org.tensorflow.framework.attr_value.AttrValue)*): NodeDef = addAllAttr(__vs)
    def addAllAttr(__vs: TraversableOnce[(_root_.scala.Predef.String, org.tensorflow.framework.attr_value.AttrValue)]): NodeDef = copy(attr = attr ++ __vs)
    def withAttr(__v: scala.collection.immutable.Map[_root_.scala.Predef.String, org.tensorflow.framework.attr_value.AttrValue]): NodeDef = copy(attr = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = op
          if (__t != "") __t else null
        }
        case 3 => input
        case 4 => {
          val __t = device
          if (__t != "") __t else null
        }
        case 5 => attr.map(org.tensorflow.framework.node_def.NodeDef._typemapper_attr.toBase)(_root_.scala.collection.breakOut)
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PString(op)
        case 3 => _root_.scalapb.descriptors.PRepeated(input.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 4 => _root_.scalapb.descriptors.PString(device)
        case 5 => _root_.scalapb.descriptors.PRepeated(attr.map(org.tensorflow.framework.node_def.NodeDef._typemapper_attr.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.tensorflow.framework.node_def.NodeDef
}

object NodeDef extends scalapb.GeneratedMessageCompanion[org.tensorflow.framework.node_def.NodeDef] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.tensorflow.framework.node_def.NodeDef] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.tensorflow.framework.node_def.NodeDef = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.tensorflow.framework.node_def.NodeDef(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[org.tensorflow.framework.node_def.NodeDef.AttrEntry]].map(org.tensorflow.framework.node_def.NodeDef._typemapper_attr.toCustom)(_root_.scala.collection.breakOut)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.tensorflow.framework.node_def.NodeDef] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.tensorflow.framework.node_def.NodeDef(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[org.tensorflow.framework.node_def.NodeDef.AttrEntry]]).getOrElse(_root_.scala.collection.Seq.empty).map(org.tensorflow.framework.node_def.NodeDef._typemapper_attr.toCustom)(_root_.scala.collection.breakOut)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = NodeDefProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = NodeDefProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 5 => __out = org.tensorflow.framework.node_def.NodeDef.AttrEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
    _root_.org.tensorflow.framework.node_def.NodeDef.AttrEntry
  )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.tensorflow.framework.node_def.NodeDef(
  )
  @SerialVersionUID(0L)
  final case class AttrEntry(
      key: _root_.scala.Predef.String = "",
      value: scala.Option[org.tensorflow.framework.attr_value.AttrValue] = None
      ) extends scalapb.GeneratedMessage with scalapb.Message[AttrEntry] with scalapb.lenses.Updatable[AttrEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (key != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, key) }
        if (value.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.get.serializedSize) + value.get.serializedSize }
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.tensorflow.framework.node_def.NodeDef.AttrEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = _input__.readString()
            case 18 =>
              __value = Option(_root_.scalapb.LiteParser.readMessage(_input__, __value.getOrElse(org.tensorflow.framework.attr_value.AttrValue.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        org.tensorflow.framework.node_def.NodeDef.AttrEntry(
            key = __key,
            value = __value
        )
      }
      def withKey(__v: _root_.scala.Predef.String): AttrEntry = copy(key = __v)
      def getValue: org.tensorflow.framework.attr_value.AttrValue = value.getOrElse(org.tensorflow.framework.attr_value.AttrValue.defaultInstance)
      def clearValue: AttrEntry = copy(value = None)
      def withValue(__v: org.tensorflow.framework.attr_value.AttrValue): AttrEntry = copy(value = Option(__v))
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = org.tensorflow.framework.node_def.NodeDef.AttrEntry
  }
  
  object AttrEntry extends scalapb.GeneratedMessageCompanion[org.tensorflow.framework.node_def.NodeDef.AttrEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.tensorflow.framework.node_def.NodeDef.AttrEntry] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.tensorflow.framework.node_def.NodeDef.AttrEntry = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      org.tensorflow.framework.node_def.NodeDef.AttrEntry(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.tensorflow.framework.attr_value.AttrValue]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[org.tensorflow.framework.node_def.NodeDef.AttrEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        org.tensorflow.framework.node_def.NodeDef.AttrEntry(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.tensorflow.framework.attr_value.AttrValue]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = org.tensorflow.framework.node_def.NodeDef.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = org.tensorflow.framework.node_def.NodeDef.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = org.tensorflow.framework.attr_value.AttrValue
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = org.tensorflow.framework.node_def.NodeDef.AttrEntry(
    )
    implicit class AttrEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.node_def.NodeDef.AttrEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.tensorflow.framework.node_def.NodeDef.AttrEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.attr_value.AttrValue] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[org.tensorflow.framework.attr_value.AttrValue]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[org.tensorflow.framework.node_def.NodeDef.AttrEntry, (_root_.scala.Predef.String, org.tensorflow.framework.attr_value.AttrValue)] =
      _root_.scalapb.TypeMapper[org.tensorflow.framework.node_def.NodeDef.AttrEntry, (_root_.scala.Predef.String, org.tensorflow.framework.attr_value.AttrValue)](__m => (__m.key, __m.getValue))(__p => org.tensorflow.framework.node_def.NodeDef.AttrEntry(__p._1, Some(__p._2)))
  }
  
  implicit class NodeDefLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.node_def.NodeDef]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.tensorflow.framework.node_def.NodeDef](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def op: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.op)((c_, f_) => c_.copy(op = f_))
    def input: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.input)((c_, f_) => c_.copy(input = f_))
    def device: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.device)((c_, f_) => c_.copy(device = f_))
    def attr: _root_.scalapb.lenses.Lens[UpperPB, scala.collection.immutable.Map[_root_.scala.Predef.String, org.tensorflow.framework.attr_value.AttrValue]] = field(_.attr)((c_, f_) => c_.copy(attr = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val OP_FIELD_NUMBER = 2
  final val INPUT_FIELD_NUMBER = 3
  final val DEVICE_FIELD_NUMBER = 4
  final val ATTR_FIELD_NUMBER = 5
  @transient
  private val _typemapper_attr: _root_.scalapb.TypeMapper[org.tensorflow.framework.node_def.NodeDef.AttrEntry, (_root_.scala.Predef.String, org.tensorflow.framework.attr_value.AttrValue)] = implicitly[_root_.scalapb.TypeMapper[org.tensorflow.framework.node_def.NodeDef.AttrEntry, (_root_.scala.Predef.String, org.tensorflow.framework.attr_value.AttrValue)]]
}
