// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.tensorflow.example.feature

/** Containers for non-sequential data.
  */
@SerialVersionUID(0L)
final case class Feature(
    kind: org.tensorflow.example.feature.Feature.Kind = org.tensorflow.example.feature.Feature.Kind.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[Feature] with scalapb.lenses.Updatable[Feature] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (kind.bytesList.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(kind.bytesList.get.serializedSize) + kind.bytesList.get.serializedSize }
      if (kind.floatList.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(kind.floatList.get.serializedSize) + kind.floatList.get.serializedSize }
      if (kind.int64List.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(kind.int64List.get.serializedSize) + kind.int64List.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      kind.bytesList.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      kind.floatList.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      kind.int64List.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.tensorflow.example.feature.Feature = {
      var __kind = this.kind
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __kind = org.tensorflow.example.feature.Feature.Kind.BytesList(_root_.scalapb.LiteParser.readMessage(_input__, kind.bytesList.getOrElse(org.tensorflow.example.feature.BytesList.defaultInstance)))
          case 18 =>
            __kind = org.tensorflow.example.feature.Feature.Kind.FloatList(_root_.scalapb.LiteParser.readMessage(_input__, kind.floatList.getOrElse(org.tensorflow.example.feature.FloatList.defaultInstance)))
          case 26 =>
            __kind = org.tensorflow.example.feature.Feature.Kind.Int64List(_root_.scalapb.LiteParser.readMessage(_input__, kind.int64List.getOrElse(org.tensorflow.example.feature.Int64List.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      org.tensorflow.example.feature.Feature(
          kind = __kind
      )
    }
    def getBytesList: org.tensorflow.example.feature.BytesList = kind.bytesList.getOrElse(org.tensorflow.example.feature.BytesList.defaultInstance)
    def withBytesList(__v: org.tensorflow.example.feature.BytesList): Feature = copy(kind = org.tensorflow.example.feature.Feature.Kind.BytesList(__v))
    def getFloatList: org.tensorflow.example.feature.FloatList = kind.floatList.getOrElse(org.tensorflow.example.feature.FloatList.defaultInstance)
    def withFloatList(__v: org.tensorflow.example.feature.FloatList): Feature = copy(kind = org.tensorflow.example.feature.Feature.Kind.FloatList(__v))
    def getInt64List: org.tensorflow.example.feature.Int64List = kind.int64List.getOrElse(org.tensorflow.example.feature.Int64List.defaultInstance)
    def withInt64List(__v: org.tensorflow.example.feature.Int64List): Feature = copy(kind = org.tensorflow.example.feature.Feature.Kind.Int64List(__v))
    def clearKind: Feature = copy(kind = org.tensorflow.example.feature.Feature.Kind.Empty)
    def withKind(__v: org.tensorflow.example.feature.Feature.Kind): Feature = copy(kind = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => kind.bytesList.orNull
        case 2 => kind.floatList.orNull
        case 3 => kind.int64List.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => kind.bytesList.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => kind.floatList.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => kind.int64List.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.tensorflow.example.feature.Feature
}

object Feature extends scalapb.GeneratedMessageCompanion[org.tensorflow.example.feature.Feature] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.tensorflow.example.feature.Feature] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.tensorflow.example.feature.Feature = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.tensorflow.example.feature.Feature(
      kind = __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[org.tensorflow.example.feature.BytesList]].map(org.tensorflow.example.feature.Feature.Kind.BytesList)
    .orElse[org.tensorflow.example.feature.Feature.Kind](__fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.tensorflow.example.feature.FloatList]].map(org.tensorflow.example.feature.Feature.Kind.FloatList))
    .orElse[org.tensorflow.example.feature.Feature.Kind](__fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[org.tensorflow.example.feature.Int64List]].map(org.tensorflow.example.feature.Feature.Kind.Int64List))
    .getOrElse(org.tensorflow.example.feature.Feature.Kind.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.tensorflow.example.feature.Feature] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.tensorflow.example.feature.Feature(
        kind = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[org.tensorflow.example.feature.BytesList]]).map(org.tensorflow.example.feature.Feature.Kind.BytesList)
    .orElse[org.tensorflow.example.feature.Feature.Kind](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.tensorflow.example.feature.FloatList]]).map(org.tensorflow.example.feature.Feature.Kind.FloatList))
    .orElse[org.tensorflow.example.feature.Feature.Kind](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[org.tensorflow.example.feature.Int64List]]).map(org.tensorflow.example.feature.Feature.Kind.Int64List))
    .getOrElse(org.tensorflow.example.feature.Feature.Kind.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = FeatureProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = FeatureProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = org.tensorflow.example.feature.BytesList
      case 2 => __out = org.tensorflow.example.feature.FloatList
      case 3 => __out = org.tensorflow.example.feature.Int64List
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.tensorflow.example.feature.Feature(
  )
  sealed trait Kind extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isBytesList: _root_.scala.Boolean = false
    def isFloatList: _root_.scala.Boolean = false
    def isInt64List: _root_.scala.Boolean = false
    def bytesList: scala.Option[org.tensorflow.example.feature.BytesList] = None
    def floatList: scala.Option[org.tensorflow.example.feature.FloatList] = None
    def int64List: scala.Option[org.tensorflow.example.feature.Int64List] = None
  }
  object Kind extends {
    @SerialVersionUID(0L)
    case object Empty extends org.tensorflow.example.feature.Feature.Kind {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class BytesList(value: org.tensorflow.example.feature.BytesList) extends org.tensorflow.example.feature.Feature.Kind {
      type ValueType = org.tensorflow.example.feature.BytesList
      override def isBytesList: _root_.scala.Boolean = true
      override def bytesList: scala.Option[org.tensorflow.example.feature.BytesList] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class FloatList(value: org.tensorflow.example.feature.FloatList) extends org.tensorflow.example.feature.Feature.Kind {
      type ValueType = org.tensorflow.example.feature.FloatList
      override def isFloatList: _root_.scala.Boolean = true
      override def floatList: scala.Option[org.tensorflow.example.feature.FloatList] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class Int64List(value: org.tensorflow.example.feature.Int64List) extends org.tensorflow.example.feature.Feature.Kind {
      type ValueType = org.tensorflow.example.feature.Int64List
      override def isInt64List: _root_.scala.Boolean = true
      override def int64List: scala.Option[org.tensorflow.example.feature.Int64List] = Some(value)
      override def number: _root_.scala.Int = 3
    }
  }
  implicit class FeatureLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.example.feature.Feature]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.tensorflow.example.feature.Feature](_l) {
    def bytesList: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.example.feature.BytesList] = field(_.getBytesList)((c_, f_) => c_.copy(kind = org.tensorflow.example.feature.Feature.Kind.BytesList(f_)))
    def floatList: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.example.feature.FloatList] = field(_.getFloatList)((c_, f_) => c_.copy(kind = org.tensorflow.example.feature.Feature.Kind.FloatList(f_)))
    def int64List: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.example.feature.Int64List] = field(_.getInt64List)((c_, f_) => c_.copy(kind = org.tensorflow.example.feature.Feature.Kind.Int64List(f_)))
    def kind: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.example.feature.Feature.Kind] = field(_.kind)((c_, f_) => c_.copy(kind = f_))
  }
  final val BYTES_LIST_FIELD_NUMBER = 1
  final val FLOAT_LIST_FIELD_NUMBER = 2
  final val INT64_LIST_FIELD_NUMBER = 3
}
