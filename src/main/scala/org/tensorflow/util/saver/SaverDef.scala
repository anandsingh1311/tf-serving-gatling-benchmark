// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.tensorflow.util.saver

/** Protocol buffer representing the configuration of a Saver.
  *
  * @param filenameTensorName
  *   The name of the tensor in which to specify the filename when saving or
  *   restoring a model checkpoint.
  * @param saveTensorName
  *   The operation to run when saving a model checkpoint.
  * @param restoreOpName
  *   The operation to run when restoring a model checkpoint.
  * @param maxToKeep
  *   Maximum number of checkpoints to keep.  If 0, no checkpoints are deleted.
  * @param sharded
  *   Shard the save files, one per device that has Variable nodes.
  * @param keepCheckpointEveryNHours
  *   How often to keep an additional checkpoint. If not specified, only the last
  *   "max_to_keep" checkpoints are kept; if specified, in addition to keeping
  *   the last "max_to_keep" checkpoints, an additional checkpoint will be kept
  *   for every n hours of training.
  */
@SerialVersionUID(0L)
final case class SaverDef(
    filenameTensorName: _root_.scala.Predef.String = "",
    saveTensorName: _root_.scala.Predef.String = "",
    restoreOpName: _root_.scala.Predef.String = "",
    maxToKeep: _root_.scala.Int = 0,
    sharded: _root_.scala.Boolean = false,
    keepCheckpointEveryNHours: _root_.scala.Float = 0.0f,
    version: org.tensorflow.util.saver.SaverDef.CheckpointFormatVersion = org.tensorflow.util.saver.SaverDef.CheckpointFormatVersion.LEGACY
    ) extends scalapb.GeneratedMessage with scalapb.Message[SaverDef] with scalapb.lenses.Updatable[SaverDef] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (filenameTensorName != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, filenameTensorName) }
      if (saveTensorName != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, saveTensorName) }
      if (restoreOpName != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, restoreOpName) }
      if (maxToKeep != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, maxToKeep) }
      if (sharded != false) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, sharded) }
      if (keepCheckpointEveryNHours != 0.0f) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(6, keepCheckpointEveryNHours) }
      if (version != org.tensorflow.util.saver.SaverDef.CheckpointFormatVersion.LEGACY) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(7, version.value) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = filenameTensorName
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = saveTensorName
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = restoreOpName
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = maxToKeep
        if (__v != 0) {
          _output__.writeInt32(4, __v)
        }
      };
      {
        val __v = sharded
        if (__v != false) {
          _output__.writeBool(5, __v)
        }
      };
      {
        val __v = keepCheckpointEveryNHours
        if (__v != 0.0f) {
          _output__.writeFloat(6, __v)
        }
      };
      {
        val __v = version
        if (__v != org.tensorflow.util.saver.SaverDef.CheckpointFormatVersion.LEGACY) {
          _output__.writeEnum(7, __v.value)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.tensorflow.util.saver.SaverDef = {
      var __filenameTensorName = this.filenameTensorName
      var __saveTensorName = this.saveTensorName
      var __restoreOpName = this.restoreOpName
      var __maxToKeep = this.maxToKeep
      var __sharded = this.sharded
      var __keepCheckpointEveryNHours = this.keepCheckpointEveryNHours
      var __version = this.version
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __filenameTensorName = _input__.readString()
          case 18 =>
            __saveTensorName = _input__.readString()
          case 26 =>
            __restoreOpName = _input__.readString()
          case 32 =>
            __maxToKeep = _input__.readInt32()
          case 40 =>
            __sharded = _input__.readBool()
          case 53 =>
            __keepCheckpointEveryNHours = _input__.readFloat()
          case 56 =>
            __version = org.tensorflow.util.saver.SaverDef.CheckpointFormatVersion.fromValue(_input__.readEnum())
          case tag => _input__.skipField(tag)
        }
      }
      org.tensorflow.util.saver.SaverDef(
          filenameTensorName = __filenameTensorName,
          saveTensorName = __saveTensorName,
          restoreOpName = __restoreOpName,
          maxToKeep = __maxToKeep,
          sharded = __sharded,
          keepCheckpointEveryNHours = __keepCheckpointEveryNHours,
          version = __version
      )
    }
    def withFilenameTensorName(__v: _root_.scala.Predef.String): SaverDef = copy(filenameTensorName = __v)
    def withSaveTensorName(__v: _root_.scala.Predef.String): SaverDef = copy(saveTensorName = __v)
    def withRestoreOpName(__v: _root_.scala.Predef.String): SaverDef = copy(restoreOpName = __v)
    def withMaxToKeep(__v: _root_.scala.Int): SaverDef = copy(maxToKeep = __v)
    def withSharded(__v: _root_.scala.Boolean): SaverDef = copy(sharded = __v)
    def withKeepCheckpointEveryNHours(__v: _root_.scala.Float): SaverDef = copy(keepCheckpointEveryNHours = __v)
    def withVersion(__v: org.tensorflow.util.saver.SaverDef.CheckpointFormatVersion): SaverDef = copy(version = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = filenameTensorName
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = saveTensorName
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = restoreOpName
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = maxToKeep
          if (__t != 0) __t else null
        }
        case 5 => {
          val __t = sharded
          if (__t != false) __t else null
        }
        case 6 => {
          val __t = keepCheckpointEveryNHours
          if (__t != 0.0f) __t else null
        }
        case 7 => {
          val __t = version.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(filenameTensorName)
        case 2 => _root_.scalapb.descriptors.PString(saveTensorName)
        case 3 => _root_.scalapb.descriptors.PString(restoreOpName)
        case 4 => _root_.scalapb.descriptors.PInt(maxToKeep)
        case 5 => _root_.scalapb.descriptors.PBoolean(sharded)
        case 6 => _root_.scalapb.descriptors.PFloat(keepCheckpointEveryNHours)
        case 7 => _root_.scalapb.descriptors.PEnum(version.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.tensorflow.util.saver.SaverDef
}

object SaverDef extends scalapb.GeneratedMessageCompanion[org.tensorflow.util.saver.SaverDef] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.tensorflow.util.saver.SaverDef] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.tensorflow.util.saver.SaverDef = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.tensorflow.util.saver.SaverDef(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(4), false).asInstanceOf[_root_.scala.Boolean],
      __fieldsMap.getOrElse(__fields.get(5), 0.0f).asInstanceOf[_root_.scala.Float],
      org.tensorflow.util.saver.SaverDef.CheckpointFormatVersion.fromValue(__fieldsMap.getOrElse(__fields.get(6), org.tensorflow.util.saver.SaverDef.CheckpointFormatVersion.LEGACY.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.tensorflow.util.saver.SaverDef] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.tensorflow.util.saver.SaverDef(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Float]).getOrElse(0.0f),
        org.tensorflow.util.saver.SaverDef.CheckpointFormatVersion.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(org.tensorflow.util.saver.SaverDef.CheckpointFormatVersion.LEGACY.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SaverProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SaverProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 7 => org.tensorflow.util.saver.SaverDef.CheckpointFormatVersion
    }
  }
  lazy val defaultInstance = org.tensorflow.util.saver.SaverDef(
  )
  sealed trait CheckpointFormatVersion extends _root_.scalapb.GeneratedEnum {
    type EnumType = CheckpointFormatVersion
    def isLegacy: _root_.scala.Boolean = false
    def isV1: _root_.scala.Boolean = false
    def isV2: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[CheckpointFormatVersion] = org.tensorflow.util.saver.SaverDef.CheckpointFormatVersion
  }
  
  object CheckpointFormatVersion extends _root_.scalapb.GeneratedEnumCompanion[CheckpointFormatVersion] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[CheckpointFormatVersion] = this
    @SerialVersionUID(0L)
    case object LEGACY extends CheckpointFormatVersion {
      val value = 0
      val index = 0
      val name = "LEGACY"
      override def isLegacy: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object V1 extends CheckpointFormatVersion {
      val value = 1
      val index = 1
      val name = "V1"
      override def isV1: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object V2 extends CheckpointFormatVersion {
      val value = 2
      val index = 2
      val name = "V2"
      override def isV2: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends CheckpointFormatVersion with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(LEGACY, V1, V2)
    def fromValue(value: _root_.scala.Int): CheckpointFormatVersion = value match {
      case 0 => LEGACY
      case 1 => V1
      case 2 => V2
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = org.tensorflow.util.saver.SaverDef.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = org.tensorflow.util.saver.SaverDef.scalaDescriptor.enums(0)
  }
  implicit class SaverDefLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.util.saver.SaverDef]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.tensorflow.util.saver.SaverDef](_l) {
    def filenameTensorName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.filenameTensorName)((c_, f_) => c_.copy(filenameTensorName = f_))
    def saveTensorName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.saveTensorName)((c_, f_) => c_.copy(saveTensorName = f_))
    def restoreOpName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.restoreOpName)((c_, f_) => c_.copy(restoreOpName = f_))
    def maxToKeep: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.maxToKeep)((c_, f_) => c_.copy(maxToKeep = f_))
    def sharded: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.sharded)((c_, f_) => c_.copy(sharded = f_))
    def keepCheckpointEveryNHours: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.keepCheckpointEveryNHours)((c_, f_) => c_.copy(keepCheckpointEveryNHours = f_))
    def version: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.util.saver.SaverDef.CheckpointFormatVersion] = field(_.version)((c_, f_) => c_.copy(version = f_))
  }
  final val FILENAME_TENSOR_NAME_FIELD_NUMBER = 1
  final val SAVE_TENSOR_NAME_FIELD_NUMBER = 2
  final val RESTORE_OP_NAME_FIELD_NUMBER = 3
  final val MAX_TO_KEEP_FIELD_NUMBER = 4
  final val SHARDED_FIELD_NUMBER = 5
  final val KEEP_CHECKPOINT_EVERY_N_HOURS_FIELD_NUMBER = 6
  final val VERSION_FIELD_NUMBER = 7
}
