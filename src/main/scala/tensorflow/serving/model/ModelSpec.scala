// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tensorflow.serving.model

/** Metadata for an inference request such as the model name and version.
  *
  * @param name
  *   Required servable name.
  * @param version
  *   Optional version. If unspecified, will use the latest (numerical) version.
  *   Typically not needed unless coordinating across multiple models that were
  *   co-trained and/or have inter-dependencies on the versions used at inference
  *   time.
  * @param signatureName
  *   A named signature to evaluate. If unspecified, the default signature will
  *   be used. Note that only MultiInference will initially support this.
  */
@SerialVersionUID(0L)
final case class ModelSpec(
    name: _root_.scala.Predef.String = "",
    version: scala.Option[_root_.scala.Long] = None,
    signatureName: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[ModelSpec] with scalapb.lenses.Updatable[ModelSpec] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (name != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, name) }
      if (version.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(tensorflow.serving.model.ModelSpec._typemapper_version.toBase(version.get).serializedSize) + tensorflow.serving.model.ModelSpec._typemapper_version.toBase(version.get).serializedSize }
      if (signatureName != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, signatureName) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = name
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      version.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(tensorflow.serving.model.ModelSpec._typemapper_version.toBase(__v).serializedSize)
        tensorflow.serving.model.ModelSpec._typemapper_version.toBase(__v).writeTo(_output__)
      };
      {
        val __v = signatureName
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorflow.serving.model.ModelSpec = {
      var __name = this.name
      var __version = this.version
      var __signatureName = this.signatureName
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __name = _input__.readString()
          case 18 =>
            __version = Option(tensorflow.serving.model.ModelSpec._typemapper_version.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, __version.map(tensorflow.serving.model.ModelSpec._typemapper_version.toBase).getOrElse(com.google.protobuf.wrappers.Int64Value.defaultInstance))))
          case 26 =>
            __signatureName = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      tensorflow.serving.model.ModelSpec(
          name = __name,
          version = __version,
          signatureName = __signatureName
      )
    }
    def withName(__v: _root_.scala.Predef.String): ModelSpec = copy(name = __v)
    def getVersion: _root_.scala.Long = version.getOrElse(tensorflow.serving.model.ModelSpec._typemapper_version.toCustom(com.google.protobuf.wrappers.Int64Value.defaultInstance))
    def clearVersion: ModelSpec = copy(version = None)
    def withVersion(__v: _root_.scala.Long): ModelSpec = copy(version = Option(__v))
    def withSignatureName(__v: _root_.scala.Predef.String): ModelSpec = copy(signatureName = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => version.map(tensorflow.serving.model.ModelSpec._typemapper_version.toBase).orNull
        case 3 => {
          val __t = signatureName
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => version.map(tensorflow.serving.model.ModelSpec._typemapper_version.toBase(_).toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PString(signatureName)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = tensorflow.serving.model.ModelSpec
}

object ModelSpec extends scalapb.GeneratedMessageCompanion[tensorflow.serving.model.ModelSpec] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorflow.serving.model.ModelSpec] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): tensorflow.serving.model.ModelSpec = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    tensorflow.serving.model.ModelSpec(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[com.google.protobuf.wrappers.Int64Value]].map(tensorflow.serving.model.ModelSpec._typemapper_version.toCustom),
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorflow.serving.model.ModelSpec] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      tensorflow.serving.model.ModelSpec(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[com.google.protobuf.wrappers.Int64Value]]).map(tensorflow.serving.model.ModelSpec._typemapper_version.toCustom),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ModelProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ModelProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = com.google.protobuf.wrappers.Int64Value
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tensorflow.serving.model.ModelSpec(
  )
  implicit class ModelSpecLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorflow.serving.model.ModelSpec]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorflow.serving.model.ModelSpec](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def version: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getVersion)((c_, f_) => c_.copy(version = Option(f_)))
    def optionalVersion: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[_root_.scala.Long]] = field(_.version)((c_, f_) => c_.copy(version = f_))
    def signatureName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.signatureName)((c_, f_) => c_.copy(signatureName = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val VERSION_FIELD_NUMBER = 2
  final val SIGNATURE_NAME_FIELD_NUMBER = 3
  @transient
  private val _typemapper_version: _root_.scalapb.TypeMapper[com.google.protobuf.wrappers.Int64Value, _root_.scala.Long] = implicitly[_root_.scalapb.TypeMapper[com.google.protobuf.wrappers.Int64Value, _root_.scala.Long]]
}
