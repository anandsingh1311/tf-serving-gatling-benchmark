// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tensorflow.serving.get_model_metadata

/** Message returned for "signature_def" field.
  */
@SerialVersionUID(0L)
final case class SignatureDefMap(
    signatureDef: scala.collection.immutable.Map[_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.SignatureDef] = scala.collection.immutable.Map.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[SignatureDefMap] with scalapb.lenses.Updatable[SignatureDefMap] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      signatureDef.foreach(signatureDef => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(tensorflow.serving.get_model_metadata.SignatureDefMap._typemapper_signatureDef.toBase(signatureDef).serializedSize) + tensorflow.serving.get_model_metadata.SignatureDefMap._typemapper_signatureDef.toBase(signatureDef).serializedSize)
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      signatureDef.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(tensorflow.serving.get_model_metadata.SignatureDefMap._typemapper_signatureDef.toBase(__v).serializedSize)
        tensorflow.serving.get_model_metadata.SignatureDefMap._typemapper_signatureDef.toBase(__v).writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorflow.serving.get_model_metadata.SignatureDefMap = {
      val __signatureDef = (scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.SignatureDef] ++= this.signatureDef)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __signatureDef += tensorflow.serving.get_model_metadata.SignatureDefMap._typemapper_signatureDef.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, tensorflow.serving.get_model_metadata.SignatureDefMap.SignatureDefEntry.defaultInstance))
          case tag => _input__.skipField(tag)
        }
      }
      tensorflow.serving.get_model_metadata.SignatureDefMap(
          signatureDef = __signatureDef.result()
      )
    }
    def clearSignatureDef = copy(signatureDef = scala.collection.immutable.Map.empty)
    def addSignatureDef(__vs: (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.SignatureDef)*): SignatureDefMap = addAllSignatureDef(__vs)
    def addAllSignatureDef(__vs: TraversableOnce[(_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.SignatureDef)]): SignatureDefMap = copy(signatureDef = signatureDef ++ __vs)
    def withSignatureDef(__v: scala.collection.immutable.Map[_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.SignatureDef]): SignatureDefMap = copy(signatureDef = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => signatureDef.map(tensorflow.serving.get_model_metadata.SignatureDefMap._typemapper_signatureDef.toBase)(_root_.scala.collection.breakOut)
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(signatureDef.map(tensorflow.serving.get_model_metadata.SignatureDefMap._typemapper_signatureDef.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = tensorflow.serving.get_model_metadata.SignatureDefMap
}

object SignatureDefMap extends scalapb.GeneratedMessageCompanion[tensorflow.serving.get_model_metadata.SignatureDefMap] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorflow.serving.get_model_metadata.SignatureDefMap] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): tensorflow.serving.get_model_metadata.SignatureDefMap = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    tensorflow.serving.get_model_metadata.SignatureDefMap(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[tensorflow.serving.get_model_metadata.SignatureDefMap.SignatureDefEntry]].map(tensorflow.serving.get_model_metadata.SignatureDefMap._typemapper_signatureDef.toCustom)(_root_.scala.collection.breakOut)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorflow.serving.get_model_metadata.SignatureDefMap] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      tensorflow.serving.get_model_metadata.SignatureDefMap(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[tensorflow.serving.get_model_metadata.SignatureDefMap.SignatureDefEntry]]).getOrElse(_root_.scala.collection.Seq.empty).map(tensorflow.serving.get_model_metadata.SignatureDefMap._typemapper_signatureDef.toCustom)(_root_.scala.collection.breakOut)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = GetModelMetadataProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = GetModelMetadataProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = tensorflow.serving.get_model_metadata.SignatureDefMap.SignatureDefEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
    _root_.tensorflow.serving.get_model_metadata.SignatureDefMap.SignatureDefEntry
  )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tensorflow.serving.get_model_metadata.SignatureDefMap(
  )
  @SerialVersionUID(0L)
  final case class SignatureDefEntry(
      key: _root_.scala.Predef.String = "",
      value: scala.Option[org.tensorflow.framework.meta_graph.SignatureDef] = None
      ) extends scalapb.GeneratedMessage with scalapb.Message[SignatureDefEntry] with scalapb.lenses.Updatable[SignatureDefEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (key != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, key) }
        if (value.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.get.serializedSize) + value.get.serializedSize }
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorflow.serving.get_model_metadata.SignatureDefMap.SignatureDefEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = _input__.readString()
            case 18 =>
              __value = Option(_root_.scalapb.LiteParser.readMessage(_input__, __value.getOrElse(org.tensorflow.framework.meta_graph.SignatureDef.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        tensorflow.serving.get_model_metadata.SignatureDefMap.SignatureDefEntry(
            key = __key,
            value = __value
        )
      }
      def withKey(__v: _root_.scala.Predef.String): SignatureDefEntry = copy(key = __v)
      def getValue: org.tensorflow.framework.meta_graph.SignatureDef = value.getOrElse(org.tensorflow.framework.meta_graph.SignatureDef.defaultInstance)
      def clearValue: SignatureDefEntry = copy(value = None)
      def withValue(__v: org.tensorflow.framework.meta_graph.SignatureDef): SignatureDefEntry = copy(value = Option(__v))
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = tensorflow.serving.get_model_metadata.SignatureDefMap.SignatureDefEntry
  }
  
  object SignatureDefEntry extends scalapb.GeneratedMessageCompanion[tensorflow.serving.get_model_metadata.SignatureDefMap.SignatureDefEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorflow.serving.get_model_metadata.SignatureDefMap.SignatureDefEntry] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): tensorflow.serving.get_model_metadata.SignatureDefMap.SignatureDefEntry = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      tensorflow.serving.get_model_metadata.SignatureDefMap.SignatureDefEntry(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.tensorflow.framework.meta_graph.SignatureDef]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorflow.serving.get_model_metadata.SignatureDefMap.SignatureDefEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        tensorflow.serving.get_model_metadata.SignatureDefMap.SignatureDefEntry(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.tensorflow.framework.meta_graph.SignatureDef]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorflow.serving.get_model_metadata.SignatureDefMap.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorflow.serving.get_model_metadata.SignatureDefMap.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = org.tensorflow.framework.meta_graph.SignatureDef
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = tensorflow.serving.get_model_metadata.SignatureDefMap.SignatureDefEntry(
    )
    implicit class SignatureDefEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorflow.serving.get_model_metadata.SignatureDefMap.SignatureDefEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorflow.serving.get_model_metadata.SignatureDefMap.SignatureDefEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.meta_graph.SignatureDef] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[org.tensorflow.framework.meta_graph.SignatureDef]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[tensorflow.serving.get_model_metadata.SignatureDefMap.SignatureDefEntry, (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.SignatureDef)] =
      _root_.scalapb.TypeMapper[tensorflow.serving.get_model_metadata.SignatureDefMap.SignatureDefEntry, (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.SignatureDef)](__m => (__m.key, __m.getValue))(__p => tensorflow.serving.get_model_metadata.SignatureDefMap.SignatureDefEntry(__p._1, Some(__p._2)))
  }
  
  implicit class SignatureDefMapLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorflow.serving.get_model_metadata.SignatureDefMap]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorflow.serving.get_model_metadata.SignatureDefMap](_l) {
    def signatureDef: _root_.scalapb.lenses.Lens[UpperPB, scala.collection.immutable.Map[_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.SignatureDef]] = field(_.signatureDef)((c_, f_) => c_.copy(signatureDef = f_))
  }
  final val SIGNATURE_DEF_FIELD_NUMBER = 1
  @transient
  private val _typemapper_signatureDef: _root_.scalapb.TypeMapper[tensorflow.serving.get_model_metadata.SignatureDefMap.SignatureDefEntry, (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.SignatureDef)] = implicitly[_root_.scalapb.TypeMapper[tensorflow.serving.get_model_metadata.SignatureDefMap.SignatureDefEntry, (_root_.scala.Predef.String, org.tensorflow.framework.meta_graph.SignatureDef)]]
}
