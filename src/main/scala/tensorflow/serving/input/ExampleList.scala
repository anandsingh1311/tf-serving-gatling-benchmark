// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tensorflow.serving.input

/** Specifies one or more fully independent input Examples.
  * See examples at:
  *     https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/example/example.proto
  */
@SerialVersionUID(0L)
final case class ExampleList(
    examples: _root_.scala.collection.Seq[org.tensorflow.example.example.Example] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[ExampleList] with scalapb.lenses.Updatable[ExampleList] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      examples.foreach(examples => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(examples.serializedSize) + examples.serializedSize)
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      examples.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorflow.serving.input.ExampleList = {
      val __examples = (_root_.scala.collection.immutable.Vector.newBuilder[org.tensorflow.example.example.Example] ++= this.examples)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __examples += _root_.scalapb.LiteParser.readMessage(_input__, org.tensorflow.example.example.Example.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      tensorflow.serving.input.ExampleList(
          examples = __examples.result()
      )
    }
    def clearExamples = copy(examples = _root_.scala.collection.Seq.empty)
    def addExamples(__vs: org.tensorflow.example.example.Example*): ExampleList = addAllExamples(__vs)
    def addAllExamples(__vs: TraversableOnce[org.tensorflow.example.example.Example]): ExampleList = copy(examples = examples ++ __vs)
    def withExamples(__v: _root_.scala.collection.Seq[org.tensorflow.example.example.Example]): ExampleList = copy(examples = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => examples
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(examples.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = tensorflow.serving.input.ExampleList
}

object ExampleList extends scalapb.GeneratedMessageCompanion[tensorflow.serving.input.ExampleList] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorflow.serving.input.ExampleList] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): tensorflow.serving.input.ExampleList = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    tensorflow.serving.input.ExampleList(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[org.tensorflow.example.example.Example]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorflow.serving.input.ExampleList] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      tensorflow.serving.input.ExampleList(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[org.tensorflow.example.example.Example]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = InputProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = InputProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = org.tensorflow.example.example.Example
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tensorflow.serving.input.ExampleList(
  )
  implicit class ExampleListLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorflow.serving.input.ExampleList]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorflow.serving.input.ExampleList](_l) {
    def examples: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.tensorflow.example.example.Example]] = field(_.examples)((c_, f_) => c_.copy(examples = f_))
  }
  final val EXAMPLES_FIELD_NUMBER = 1
}
