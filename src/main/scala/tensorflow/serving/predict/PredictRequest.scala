// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tensorflow.serving.predict

/** PredictRequest specifies which TensorFlow model to run, as well as
  * how inputs are mapped to tensors and how outputs are filtered before
  * returning to user.
  *
  * @param modelSpec
  *   Model Specification.
  * @param inputs
  *   Input tensors.
  *   Names of input tensor are alias names. The mapping from aliases to real
  *   input tensor names is expected to be stored as named generic signature
  *   under the key "inputs" in the model export.
  *   Each alias listed in a generic signature named "inputs" should be provided
  *   exactly once in order to run the prediction.
  * @param outputFilter
  *   Output filter.
  *   Names specified are alias names. The mapping from aliases to real output
  *   tensor names is expected to be stored as named generic signature under
  *   the key "outputs" in the model export.
  *   Only tensors specified here will be run/fetched and returned, with the
  *   exception that when none is specified, all tensors specified in the
  *   named signature will be run/fetched and returned.
  */
@SerialVersionUID(0L)
final case class PredictRequest(
    modelSpec: scala.Option[tensorflow.serving.model.ModelSpec] = None,
    inputs: scala.collection.immutable.Map[_root_.scala.Predef.String, org.tensorflow.framework.tensor.TensorProto] = scala.collection.immutable.Map.empty,
    outputFilter: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[PredictRequest] with scalapb.lenses.Updatable[PredictRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (modelSpec.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(modelSpec.get.serializedSize) + modelSpec.get.serializedSize }
      inputs.foreach(inputs => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(tensorflow.serving.predict.PredictRequest._typemapper_inputs.toBase(inputs).serializedSize) + tensorflow.serving.predict.PredictRequest._typemapper_inputs.toBase(inputs).serializedSize)
      outputFilter.foreach(outputFilter => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, outputFilter))
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      modelSpec.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      inputs.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(tensorflow.serving.predict.PredictRequest._typemapper_inputs.toBase(__v).serializedSize)
        tensorflow.serving.predict.PredictRequest._typemapper_inputs.toBase(__v).writeTo(_output__)
      };
      outputFilter.foreach { __v =>
        _output__.writeString(3, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorflow.serving.predict.PredictRequest = {
      var __modelSpec = this.modelSpec
      val __inputs = (scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, org.tensorflow.framework.tensor.TensorProto] ++= this.inputs)
      val __outputFilter = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.outputFilter)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __modelSpec = Option(_root_.scalapb.LiteParser.readMessage(_input__, __modelSpec.getOrElse(tensorflow.serving.model.ModelSpec.defaultInstance)))
          case 18 =>
            __inputs += tensorflow.serving.predict.PredictRequest._typemapper_inputs.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, tensorflow.serving.predict.PredictRequest.InputsEntry.defaultInstance))
          case 26 =>
            __outputFilter += _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      tensorflow.serving.predict.PredictRequest(
          modelSpec = __modelSpec,
          inputs = __inputs.result(),
          outputFilter = __outputFilter.result()
      )
    }
    def getModelSpec: tensorflow.serving.model.ModelSpec = modelSpec.getOrElse(tensorflow.serving.model.ModelSpec.defaultInstance)
    def clearModelSpec: PredictRequest = copy(modelSpec = None)
    def withModelSpec(__v: tensorflow.serving.model.ModelSpec): PredictRequest = copy(modelSpec = Option(__v))
    def clearInputs = copy(inputs = scala.collection.immutable.Map.empty)
    def addInputs(__vs: (_root_.scala.Predef.String, org.tensorflow.framework.tensor.TensorProto)*): PredictRequest = addAllInputs(__vs)
    def addAllInputs(__vs: TraversableOnce[(_root_.scala.Predef.String, org.tensorflow.framework.tensor.TensorProto)]): PredictRequest = copy(inputs = inputs ++ __vs)
    def withInputs(__v: scala.collection.immutable.Map[_root_.scala.Predef.String, org.tensorflow.framework.tensor.TensorProto]): PredictRequest = copy(inputs = __v)
    def clearOutputFilter = copy(outputFilter = _root_.scala.collection.Seq.empty)
    def addOutputFilter(__vs: _root_.scala.Predef.String*): PredictRequest = addAllOutputFilter(__vs)
    def addAllOutputFilter(__vs: TraversableOnce[_root_.scala.Predef.String]): PredictRequest = copy(outputFilter = outputFilter ++ __vs)
    def withOutputFilter(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): PredictRequest = copy(outputFilter = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => modelSpec.orNull
        case 2 => inputs.map(tensorflow.serving.predict.PredictRequest._typemapper_inputs.toBase)(_root_.scala.collection.breakOut)
        case 3 => outputFilter
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => modelSpec.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PRepeated(inputs.map(tensorflow.serving.predict.PredictRequest._typemapper_inputs.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
        case 3 => _root_.scalapb.descriptors.PRepeated(outputFilter.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = tensorflow.serving.predict.PredictRequest
}

object PredictRequest extends scalapb.GeneratedMessageCompanion[tensorflow.serving.predict.PredictRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorflow.serving.predict.PredictRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): tensorflow.serving.predict.PredictRequest = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    tensorflow.serving.predict.PredictRequest(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[tensorflow.serving.model.ModelSpec]],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[tensorflow.serving.predict.PredictRequest.InputsEntry]].map(tensorflow.serving.predict.PredictRequest._typemapper_inputs.toCustom)(_root_.scala.collection.breakOut),
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorflow.serving.predict.PredictRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      tensorflow.serving.predict.PredictRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[tensorflow.serving.model.ModelSpec]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[tensorflow.serving.predict.PredictRequest.InputsEntry]]).getOrElse(_root_.scala.collection.Seq.empty).map(tensorflow.serving.predict.PredictRequest._typemapper_inputs.toCustom)(_root_.scala.collection.breakOut),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PredictProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PredictProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = tensorflow.serving.model.ModelSpec
      case 2 => __out = tensorflow.serving.predict.PredictRequest.InputsEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
    _root_.tensorflow.serving.predict.PredictRequest.InputsEntry
  )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tensorflow.serving.predict.PredictRequest(
  )
  @SerialVersionUID(0L)
  final case class InputsEntry(
      key: _root_.scala.Predef.String = "",
      value: scala.Option[org.tensorflow.framework.tensor.TensorProto] = None
      ) extends scalapb.GeneratedMessage with scalapb.Message[InputsEntry] with scalapb.lenses.Updatable[InputsEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (key != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, key) }
        if (value.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.get.serializedSize) + value.get.serializedSize }
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorflow.serving.predict.PredictRequest.InputsEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __key = _input__.readString()
            case 18 =>
              __value = Option(_root_.scalapb.LiteParser.readMessage(_input__, __value.getOrElse(org.tensorflow.framework.tensor.TensorProto.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        tensorflow.serving.predict.PredictRequest.InputsEntry(
            key = __key,
            value = __value
        )
      }
      def withKey(__v: _root_.scala.Predef.String): InputsEntry = copy(key = __v)
      def getValue: org.tensorflow.framework.tensor.TensorProto = value.getOrElse(org.tensorflow.framework.tensor.TensorProto.defaultInstance)
      def clearValue: InputsEntry = copy(value = None)
      def withValue(__v: org.tensorflow.framework.tensor.TensorProto): InputsEntry = copy(value = Option(__v))
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = tensorflow.serving.predict.PredictRequest.InputsEntry
  }
  
  object InputsEntry extends scalapb.GeneratedMessageCompanion[tensorflow.serving.predict.PredictRequest.InputsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorflow.serving.predict.PredictRequest.InputsEntry] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): tensorflow.serving.predict.PredictRequest.InputsEntry = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      tensorflow.serving.predict.PredictRequest.InputsEntry(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.tensorflow.framework.tensor.TensorProto]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorflow.serving.predict.PredictRequest.InputsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        tensorflow.serving.predict.PredictRequest.InputsEntry(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.tensorflow.framework.tensor.TensorProto]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = tensorflow.serving.predict.PredictRequest.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = tensorflow.serving.predict.PredictRequest.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = org.tensorflow.framework.tensor.TensorProto
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = tensorflow.serving.predict.PredictRequest.InputsEntry(
    )
    implicit class InputsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorflow.serving.predict.PredictRequest.InputsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorflow.serving.predict.PredictRequest.InputsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, org.tensorflow.framework.tensor.TensorProto] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[org.tensorflow.framework.tensor.TensorProto]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[tensorflow.serving.predict.PredictRequest.InputsEntry, (_root_.scala.Predef.String, org.tensorflow.framework.tensor.TensorProto)] =
      _root_.scalapb.TypeMapper[tensorflow.serving.predict.PredictRequest.InputsEntry, (_root_.scala.Predef.String, org.tensorflow.framework.tensor.TensorProto)](__m => (__m.key, __m.getValue))(__p => tensorflow.serving.predict.PredictRequest.InputsEntry(__p._1, Some(__p._2)))
  }
  
  implicit class PredictRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorflow.serving.predict.PredictRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorflow.serving.predict.PredictRequest](_l) {
    def modelSpec: _root_.scalapb.lenses.Lens[UpperPB, tensorflow.serving.model.ModelSpec] = field(_.getModelSpec)((c_, f_) => c_.copy(modelSpec = Option(f_)))
    def optionalModelSpec: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[tensorflow.serving.model.ModelSpec]] = field(_.modelSpec)((c_, f_) => c_.copy(modelSpec = f_))
    def inputs: _root_.scalapb.lenses.Lens[UpperPB, scala.collection.immutable.Map[_root_.scala.Predef.String, org.tensorflow.framework.tensor.TensorProto]] = field(_.inputs)((c_, f_) => c_.copy(inputs = f_))
    def outputFilter: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.outputFilter)((c_, f_) => c_.copy(outputFilter = f_))
  }
  final val MODEL_SPEC_FIELD_NUMBER = 1
  final val INPUTS_FIELD_NUMBER = 2
  final val OUTPUT_FILTER_FIELD_NUMBER = 3
  @transient
  private val _typemapper_inputs: _root_.scalapb.TypeMapper[tensorflow.serving.predict.PredictRequest.InputsEntry, (_root_.scala.Predef.String, org.tensorflow.framework.tensor.TensorProto)] = implicitly[_root_.scalapb.TypeMapper[tensorflow.serving.predict.PredictRequest.InputsEntry, (_root_.scala.Predef.String, org.tensorflow.framework.tensor.TensorProto)]]
}
