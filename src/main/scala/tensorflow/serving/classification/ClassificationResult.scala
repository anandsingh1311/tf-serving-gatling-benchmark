// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package tensorflow.serving.classification

/** For tensorflow.Example this will contain one result.
  * For tensorflow.InferenceExample this will contain one result for each
  * InferenceExample::features and in the same order as the features.
  */
@SerialVersionUID(0L)
final case class ClassificationResult(
    classifications: _root_.scala.collection.Seq[tensorflow.serving.classification.Classifications] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[ClassificationResult] with scalapb.lenses.Updatable[ClassificationResult] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      classifications.foreach(classifications => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(classifications.serializedSize) + classifications.serializedSize)
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      classifications.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): tensorflow.serving.classification.ClassificationResult = {
      val __classifications = (_root_.scala.collection.immutable.Vector.newBuilder[tensorflow.serving.classification.Classifications] ++= this.classifications)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __classifications += _root_.scalapb.LiteParser.readMessage(_input__, tensorflow.serving.classification.Classifications.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      tensorflow.serving.classification.ClassificationResult(
          classifications = __classifications.result()
      )
    }
    def clearClassifications = copy(classifications = _root_.scala.collection.Seq.empty)
    def addClassifications(__vs: tensorflow.serving.classification.Classifications*): ClassificationResult = addAllClassifications(__vs)
    def addAllClassifications(__vs: TraversableOnce[tensorflow.serving.classification.Classifications]): ClassificationResult = copy(classifications = classifications ++ __vs)
    def withClassifications(__v: _root_.scala.collection.Seq[tensorflow.serving.classification.Classifications]): ClassificationResult = copy(classifications = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => classifications
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(classifications.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = tensorflow.serving.classification.ClassificationResult
}

object ClassificationResult extends scalapb.GeneratedMessageCompanion[tensorflow.serving.classification.ClassificationResult] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[tensorflow.serving.classification.ClassificationResult] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): tensorflow.serving.classification.ClassificationResult = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    tensorflow.serving.classification.ClassificationResult(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[tensorflow.serving.classification.Classifications]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[tensorflow.serving.classification.ClassificationResult] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      tensorflow.serving.classification.ClassificationResult(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[tensorflow.serving.classification.Classifications]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ClassificationProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ClassificationProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = tensorflow.serving.classification.Classifications
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = tensorflow.serving.classification.ClassificationResult(
  )
  implicit class ClassificationResultLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, tensorflow.serving.classification.ClassificationResult]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, tensorflow.serving.classification.ClassificationResult](_l) {
    def classifications: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[tensorflow.serving.classification.Classifications]] = field(_.classifications)((c_, f_) => c_.copy(classifications = f_))
  }
  final val CLASSIFICATIONS_FIELD_NUMBER = 1
}
